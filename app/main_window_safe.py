
"""
Safe Main Window - Phi√™n b·∫£n an to√†n c·ªßa main window
"""

import logging
import os
from PyQt6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
    QTabWidget, QStatusBar, QMenuBar, QMenu, QMessageBox,
    QProgressBar, QLabel, QToolBar
)
from PyQt6.QtCore import Qt, QTimer, pyqtSignal
from PyQt6.QtGui import QIcon, QKeySequence, QAction

class SafeMainWindow(QMainWindow):
    """C·ª≠a s·ªï ch√≠nh an to√†n v·ªõi error handling t·ªët h∆°n"""
    
    # Signals
    status_message = pyqtSignal(str)
    
    def __init__(self):
        super().__init__()
        self.logger = logging.getLogger(__name__)
        self.db_manager = None
        
        try:
            self.init_ui()
            self.create_menu_bar()
            self.create_status_bar()
            self.setup_connections()
            
            # Timer ƒë·ªÉ c·∫≠p nh·∫≠t th·ªùi gian tr√™n status bar
            self.timer = QTimer()
            self.timer.timeout.connect(self.update_time)
            self.timer.start(1000)
            
            # Delay load data ƒë·ªÉ tr√°nh crash
            QTimer.singleShot(500, self.delayed_load_data)
            
        except Exception as e:
            self.logger.error(f"Error initializing SafeMainWindow: {e}")
            raise
        
    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng an to√†n"""
        try:
            self.setWindowTitle("WooCommerce Product Manager (Safe Mode)")
            self.setGeometry(100, 100, 1000, 700)
            self.setMinimumSize(800, 600)
            
            # Thi·∫øt l·∫≠p icon an to√†n
            try:
                if os.path.exists("attached_assets/woo-Photoroom.png"):
                    window_icon = QIcon("attached_assets/woo-Photoroom.png")
                    if not window_icon.isNull():
                        self.setWindowIcon(window_icon)
                        self.logger.info("Window icon loaded successfully")
            except Exception as e:
                self.logger.warning(f"Could not load window icon: {e}")
            
            # Widget trung t√¢m
            central_widget = QWidget()
            self.setCentralWidget(central_widget)
            
            # Layout ch√≠nh
            layout = QVBoxLayout(central_widget)
            layout.setContentsMargins(10, 10, 10, 10)
            
            # T·∫°o tab widget
            self.tab_widget = QTabWidget()
            self.tab_widget.setTabPosition(QTabWidget.TabPosition.North)
            
            # T·∫°o c√°c tab an to√†n
            self.create_safe_tabs()
            
            layout.addWidget(self.tab_widget)
            
        except Exception as e:
            self.logger.error(f"Error in init_ui: {e}")
            raise
            
    def create_safe_tabs(self):
        """T·∫°o c√°c tab m·ªôt c√°ch an to√†n"""
        try:
            # Tab th√¥ng tin ƒë∆°n gi·∫£n
            info_tab = QWidget()
            info_layout = QVBoxLayout(info_tab)
            
            info_label = QLabel("""
                <h2>üöÄ WooCommerce Product Manager</h2>
                <p><strong>Phi√™n b·∫£n:</strong> 1.0.0 (Safe Mode)</p>
                <p><strong>Tr·∫°ng th√°i:</strong> ·ª®ng d·ª•ng ƒëang ch·∫°y trong ch·∫ø ƒë·ªô an to√†n</p>
                <br>
                <h3>üìã T√≠nh nƒÉng ch√≠nh:</h3>
                <ul>
                    <li>üåê Qu·∫£n l√Ω nhi·ªÅu site WooCommerce</li>
                    <li>üì¶ Qu·∫£n l√Ω s·∫£n ph·∫©m</li>
                    <li>üìÅ Qu·∫£n l√Ω danh m·ª•c</li>
                    <li>üìÑ Qu·∫£n l√Ω trang</li>
                    <li>üìÇ Qu√©t th∆∞ m·ª•c</li>
                </ul>
                <br>
                <p><em>C√°c tab kh√°c s·∫Ω ƒë∆∞·ª£c t·∫£i d·∫ßn ƒë·ªÉ tr√°nh crash...</em></p>
            """)
            info_label.setWordWrap(True)
            info_layout.addWidget(info_label)
            
            self.tab_widget.addTab(info_tab, "‚ÑπÔ∏è Th√¥ng tin")
            
            # Load c√°c tab kh√°c t·ª´ t·ª´
            QTimer.singleShot(1000, self.load_site_manager_tab)
            QTimer.singleShot(2000, self.load_product_manager_tab)
            QTimer.singleShot(3000, self.load_other_tabs)
            
        except Exception as e:
            self.logger.error(f"Error creating safe tabs: {e}")
    
    def load_site_manager_tab(self):
        """Load tab qu·∫£n l√Ω sites"""
        try:
            from .site_manager import SiteManagerTab
            
            self.site_manager_tab = SiteManagerTab()
            self.site_manager_tab.db_manager = self.db_manager
            self.tab_widget.addTab(self.site_manager_tab, "üåê Qu·∫£n l√Ω Site")
            
            # K·∫øt n·ªëi signals
            self.site_manager_tab.status_message.connect(self.status_message)
            
            self.logger.info("Site manager tab loaded")
            
        except Exception as e:
            self.logger.error(f"Error loading site manager tab: {e}")
            self.show_error_tab("Site Manager", str(e))
    
    def load_product_manager_tab(self):
        """Load tab qu·∫£n l√Ω s·∫£n ph·∫©m"""
        try:
            from .product_manager import ProductManagerTab
            
            self.product_manager_tab = ProductManagerTab()
            self.product_manager_tab.db_manager = self.db_manager
            self.tab_widget.addTab(self.product_manager_tab, "üì¶ Qu·∫£n l√Ω S·∫£n ph·∫©m")
            
            # K·∫øt n·ªëi signals
            self.product_manager_tab.status_message.connect(self.status_message)
            
            self.logger.info("Product manager tab loaded")
            
        except Exception as e:
            self.logger.error(f"Error loading product manager tab: {e}")
            self.show_error_tab("Product Manager", str(e))
    
    def load_other_tabs(self):
        """Load c√°c tab kh√°c"""
        # Load Category Manager
        try:
            from .category_manager import CategoryManagerTab
            
            self.category_manager_tab = CategoryManagerTab()
            self.category_manager_tab.db_manager = self.db_manager
            self.tab_widget.addTab(self.category_manager_tab, "üìÅ Qu·∫£n l√Ω Danh m·ª•c")
            
            self.logger.info("Category manager tab loaded")
            
        except Exception as e:
            self.logger.error(f"Error loading category manager tab: {e}")
            self.show_error_tab("Category Manager", str(e))
        
        # Load Page Manager
        try:
            from .page_manager import PageManagerTab
            
            self.page_manager_tab = PageManagerTab()
            self.page_manager_tab.db_manager = self.db_manager
            self.tab_widget.addTab(self.page_manager_tab, "üìÑ Qu·∫£n l√Ω Trang")
            
            self.logger.info("Page manager tab loaded")
            
        except Exception as e:
            self.logger.error(f"Error loading page manager tab: {e}")
            self.show_error_tab("Page Manager", str(e))
        
        # Load Folder Scanner (c√≥ th·ªÉ g√¢y crash nhi·ªÅu nh·∫•t)
        try:
            from .folder_scanner import FolderScannerTab
            
            self.folder_scanner_tab = FolderScannerTab()
            self.folder_scanner_tab.db_manager = self.db_manager
            self.tab_widget.addTab(self.folder_scanner_tab, "üìÇ Qu√©t th∆∞ m·ª•c")
            
            self.logger.info("Folder scanner tab loaded")
            
        except Exception as e:
            self.logger.error(f"Error loading folder scanner tab: {e}")
            self.show_error_tab("Folder Scanner", str(e))
    
    def show_error_tab(self, tab_name: str, error_msg: str):
        """Hi·ªÉn th·ªã tab l·ªói thay v√¨ tab b·ªã crash"""
        error_tab = QWidget()
        error_layout = QVBoxLayout(error_tab)
        
        error_label = QLabel(f"""
            <h3>‚ùå L·ªói t·∫£i {tab_name}</h3>
            <p><strong>Chi ti·∫øt l·ªói:</strong></p>
            <pre>{error_msg}</pre>
            <br>
            <p><em>Tab n√†y c√≥ th·ªÉ ƒë∆∞·ª£c t·∫£i l·∫°i sau khi kh·∫Øc ph·ª•c l·ªói.</em></p>
        """)
        error_label.setWordWrap(True)
        error_layout.addWidget(error_label)
        
        self.tab_widget.addTab(error_tab, f"‚ùå {tab_name}")
        
    def create_menu_bar(self):
        """T·∫°o menu bar ƒë∆°n gi·∫£n"""
        try:
            menubar = self.menuBar()
            
            # Menu File
            file_menu = menubar.addMenu("&File")
            
            # Exit
            exit_action = QAction("‚ùå Tho√°t", self)
            exit_action.setShortcut(QKeySequence.StandardKey.Quit)
            exit_action.triggered.connect(self.close)
            file_menu.addAction(exit_action)
            
            # Menu Help
            help_menu = menubar.addMenu("&Help")
            
            # About
            about_action = QAction("‚ÑπÔ∏è V·ªÅ ·ª©ng d·ª•ng", self)
            about_action.triggered.connect(self.show_about)
            help_menu.addAction(about_action)
            
        except Exception as e:
            self.logger.error(f"Error creating menu bar: {e}")
        
    def create_status_bar(self):
        """T·∫°o status bar"""
        try:
            self.status_bar = QStatusBar()
            self.setStatusBar(self.status_bar)
            
            # Label cho th·ªùi gian
            self.time_label = QLabel()
            self.status_bar.addPermanentWidget(self.time_label)
            
            # Hi·ªÉn th·ªã th√¥ng b√°o kh·ªüi t·∫°o
            self.status_bar.showMessage("Safe mode - S·∫µn s√†ng", 2000)
            
        except Exception as e:
            self.logger.error(f"Error creating status bar: {e}")
        
    def delayed_load_data(self):
        """Load data sau khi UI ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ho√†n to√†n"""
        try:
            if hasattr(self, 'site_manager_tab') and hasattr(self.site_manager_tab, 'load_sites'):
                self.site_manager_tab.load_sites()
                
        except Exception as e:
            self.logger.error(f"Error in delayed_load_data: {e}")

    def setup_connections(self):
        """Thi·∫øt l·∫≠p k·∫øt n·ªëi signals/slots"""
        try:
            self.status_message.connect(self.status_bar.showMessage)
        except Exception as e:
            self.logger.error(f"Error setting up connections: {e}")
        
    def update_time(self):
        """C·∫≠p nh·∫≠t th·ªùi gian tr√™n status bar"""
        try:
            from datetime import datetime
            current_time = datetime.now().strftime("%H:%M:%S - %d/%m/%Y")
            self.time_label.setText(f"Safe Mode | {current_time}")
        except Exception as e:
            self.logger.error(f"Error updating time: {e}")
            
    def show_about(self):
        """Hi·ªÉn th·ªã th√¥ng tin v·ªÅ ·ª©ng d·ª•ng"""
        try:
            QMessageBox.about(self, "V·ªÅ ·ª©ng d·ª•ng", 
                             "WooCommerce Product Manager v1.0.0 (Safe Mode)\n\n"
                             "·ª®ng d·ª•ng qu·∫£n l√Ω s·∫£n ph·∫©m ƒëa site WooCommerce\n"
                             "Ch·∫°y trong ch·∫ø ƒë·ªô an to√†n ƒë·ªÉ tr√°nh crash\n\n"
                             "T√≠nh nƒÉng:\n"
                             "‚Ä¢ Qu·∫£n l√Ω nhi·ªÅu site WooCommerce\n"
                             "‚Ä¢ CRUD s·∫£n ph·∫©m\n"
                             "‚Ä¢ Import/Export CSV\n"
                             "‚Ä¢ ƒê·ªìng b·ªô d·ªØ li·ªáu\n"
                             "‚Ä¢ T√¨m ki·∫øm v√† l·ªçc")
        except Exception as e:
            self.logger.error(f"Error showing about: {e}")
                             
    def closeEvent(self, event):
        """X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng ·ª©ng d·ª•ng"""
        try:
            reply = QMessageBox.question(self, "X√°c nh·∫≠n", 
                                       "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t ·ª©ng d·ª•ng?",
                                       QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                                       QMessageBox.StandardButton.No)
            
            if reply == QMessageBox.StandardButton.Yes:
                self.logger.info("Closing application (safe mode)")
                event.accept()
            else:
                event.ignore()
        except Exception as e:
            self.logger.error(f"Error in closeEvent: {e}")
            event.accept()  # Cho ph√©p ƒë√≥ng n·∫øu c√≥ l·ªói
