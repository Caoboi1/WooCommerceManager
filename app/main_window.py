"""
Main Window - C·ª≠a s·ªï ch√≠nh c·ªßa ·ª©ng d·ª•ng

COMPONENT OVERVIEW:
------------------
C·ª≠a s·ªï ch√≠nh ch·ª©a giao di·ªán tab cho ·ª©ng d·ª•ng WooCommerce Product Manager.
Bao g·ªìm menu bar, toolbar, status bar v√† hai tab ch√≠nh:
- Tab 1: Qu·∫£n l√Ω Sites WooCommerce 
- Tab 2: Qu·∫£n l√Ω S·∫£n ph·∫©m

FEATURES:
---------
- Tab-based interface v·ªõi PyQt6 QTabWidget
- Menu system v·ªõi shortcuts
- Toolbar v·ªõi quick actions
- Status bar v·ªõi th·ªùi gian v√† progress indicator
- Signal/slot connections gi·ªØa c√°c components
- Auto-refresh functionality

SIGNALS:
--------
- status_message(str): Hi·ªÉn th·ªã th√¥ng b√°o tr√™n status bar
- progress_started(): B·∫Øt ƒë·∫ßu hi·ªÉn th·ªã progress bar
- progress_finished(): ·∫®n progress bar

DEPENDENCIES:
-------------
- SiteManagerTab: Tab qu·∫£n l√Ω sites
- ProductManagerTab: Tab qu·∫£n l√Ω s·∫£n ph·∫©m  
- DatabaseManager: Qu·∫£n l√Ω SQLite database
"""

import logging
import os
from PyQt6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
    QTabWidget, QStatusBar, QMenuBar, QMenu, QMessageBox,
    QProgressBar, QLabel, QToolBar
)
from PyQt6.QtCore import Qt, QTimer, pyqtSignal
from PyQt6.QtGui import QIcon, QKeySequence, QAction, QPixmap, QPainter, QBrush

from .site_manager import SiteManagerTab
from .product_manager import ProductManagerTab
from .category_manager import CategoryManagerTab
from app.page_manager import PageManagerTab
from .folder_scanner import FolderScannerTab
from .database import DatabaseManager
# Assuming DataManagerTab is in data_manager.py
from .data_manager import DataManagerTab


class MainWindow(QMainWindow):
    """C·ª≠a s·ªï ch√≠nh c·ªßa ·ª©ng d·ª•ng"""

    # Signals
    status_message = pyqtSignal(str)

    def __init__(self):
        super().__init__()
        self.logger = logging.getLogger(__name__)
        self.db_manager = DatabaseManager()

        self.init_ui()
        self.create_menu_bar()
        self.create_tool_bar()
        self.create_status_bar()
        self.setup_connections()

        # Timer ƒë·ªÉ c·∫≠p nh·∫≠t th·ªùi gian tr√™n status bar
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_time)
        self.timer.start(1000)

    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng"""
        self.setWindowTitle("WooCommerce Product Manager")
        self.setGeometry(100, 100, 1200, 800)
        self.setMinimumSize(1000, 600)

        # Thi·∫øt l·∫≠p icon cho c·ª≠a s·ªï - t·∫°o icon m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ file
        try:
            window_icon = self.create_default_icon()
            if window_icon and not window_icon.isNull():
                self.setWindowIcon(window_icon)
                self.logger.info("ƒê√£ thi·∫øt l·∫≠p icon cho c·ª≠a s·ªï ch√≠nh")
            else:
                # B·ªè qua icon n·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c
                self.logger.info("·ª®ng d·ª•ng kh·ªüi ƒë·ªông th√†nh c√¥ng")

        except Exception as e:
            self.logger.info("·ª®ng d·ª•ng kh·ªüi ƒë·ªông th√†nh c√¥ng")

        # Widget trung t√¢m
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # Layout ch√≠nh
        layout = QVBoxLayout(central_widget)
        layout.setContentsMargins(5, 5, 5, 5)

        # T·∫°o tab widget
        self.tab_widget = QTabWidget()
        self.tab_widget.setTabPosition(QTabWidget.TabPosition.North)
        self.tab_widget.setMovable(True)

        # T·∫°o c√°c tab
        self.site_manager_tab = SiteManagerTab()
        self.site_manager_tab.db_manager = self.db_manager

        self.product_manager_tab = ProductManagerTab()
        self.product_manager_tab.db_manager = self.db_manager

        self.category_manager_tab = CategoryManagerTab()
        self.category_manager_tab.db_manager = self.db_manager

        self.page_manager_tab = PageManagerTab()
        self.page_manager_tab.db_manager = self.db_manager

        # Kh·ªüi t·∫°o FolderScannerTab v·ªõi error handling
        try:
            self.folder_scanner_tab = FolderScannerTab()
            self.folder_scanner_tab.db_manager = self.db_manager
        except Exception as e:
            self.logger.error(f"Error initializing FolderScannerTab: {e}")
            # T·∫°o tab replacement ƒë∆°n gi·∫£n
            self.folder_scanner_tab = QWidget()
            layout = QVBoxLayout(self.folder_scanner_tab)
            error_label = QLabel(f"L·ªói kh·ªüi t·∫°o tab qu√©t th∆∞ m·ª•c: {e}")
            layout.addWidget(error_label)

        # Delay load data ƒë·ªÉ tr√°nh access violation khi kh·ªüi t·∫°o
        QTimer.singleShot(200, self.delayed_load_data)

        # Th√™m c√°c tab v√†o tab widget
        self.tab_widget.addTab(self.site_manager_tab, "üåê Qu·∫£n l√Ω Site")
        self.tab_widget.addTab(self.product_manager_tab, "üì¶ Qu·∫£n l√Ω S·∫£n ph·∫©m")
        self.tab_widget.addTab(self.category_manager_tab, "üìÅ Qu·∫£n l√Ω Danh m·ª•c")
        self.tab_widget.addTab(self.page_manager_tab, "üìÑ Qu·∫£n l√Ω Trang")
        self.tab_widget.addTab(self.folder_scanner_tab, "üìÇ Qu√©t th∆∞ m·ª•c")

        # Tab Qu·∫£n l√Ω Data
        try:
            self.data_manager_tab = DataManagerTab()
            self.data_manager_tab.db_manager = self.db_manager # Assuming the tab uses db_manager
            self.tab_widget.addTab(self.data_manager_tab, "üìä Qu·∫£n l√Ω Data")
        except Exception as e:
            self.logger.error(f"Error creating Data Manager tab: {str(e)}")
            # Th√™m tab placeholder n·∫øu l·ªói
            error_tab = QWidget()
            error_layout = QVBoxLayout(error_tab)
            error_label = QLabel(f"L·ªói t·∫£i Data Manager: {str(e)}")
            error_layout.addWidget(error_label)
            self.tab_widget.addTab(error_tab, "‚ùå Data Manager")

        layout.addWidget(self.tab_widget)

    def create_menu_bar(self):
        """T·∫°o menu bar"""
        menubar = self.menuBar()

        # Menu File
        file_menu = menubar.addMenu("&File")

        # Import CSV
        import_action = QAction("üì• Import CSV", self)
        import_action.setShortcut(QKeySequence.StandardKey.Open)
        import_action.triggered.connect(self.import_csv)
        file_menu.addAction(import_action)

        # Export CSV
        export_action = QAction("üì§ Export CSV", self)
        export_action.setShortcut(QKeySequence.StandardKey.SaveAs)
        export_action.triggered.connect(self.export_csv)
        file_menu.addAction(export_action)

        file_menu.addSeparator()

        # Exit
        exit_action = QAction("‚ùå Tho√°t", self)
        exit_action.setShortcut(QKeySequence.StandardKey.Quit)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        # Menu Tools
        tools_menu = menubar.addMenu("&Tools")

        # Refresh All
        refresh_action = QAction("üîÑ L√†m m·ªõi t·∫•t c·∫£", self)
        refresh_action.setShortcut(QKeySequence.StandardKey.Refresh)
        refresh_action.triggered.connect(self.refresh_all)
        tools_menu.addAction(refresh_action)

        # Sync Products
        sync_action = QAction("üîÑ ƒê·ªìng b·ªô s·∫£n ph·∫©m", self)
        sync_action.triggered.connect(self.sync_products)
        tools_menu.addAction(sync_action)

        # Menu Help
        help_menu = menubar.addMenu("&Help")

        # About
        about_action = QAction("‚ÑπÔ∏è V·ªÅ ·ª©ng d·ª•ng", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)

    def create_tool_bar(self):
        """T·∫°o toolbar"""
        toolbar = QToolBar("Main Toolbar")
        self.addToolBar(toolbar)

        # Refresh button
        refresh_action = QAction("üîÑ", self)
        refresh_action.setToolTip("L√†m m·ªõi d·ªØ li·ªáu")
        refresh_action.triggered.connect(self.refresh_all)
        toolbar.addAction(refresh_action)

        toolbar.addSeparator()

        # Import button
        import_action = QAction("üì•", self)
        import_action.setToolTip("Import CSV")
        import_action.triggered.connect(self.import_csv)
        toolbar.addAction(import_action)

        # Export button
        export_action = QAction("üì§", self)
        export_action.setToolTip("Export CSV")
        export_action.triggered.connect(self.export_csv)
        toolbar.addAction(export_action)

        toolbar.addSeparator()

        # Sync button
        sync_action = QAction("üîÑ", self)
        sync_action.setToolTip("ƒê·ªìng b·ªô s·∫£n ph·∫©m")
        sync_action.triggered.connect(self.sync_products)
        toolbar.addAction(sync_action)

    def create_status_bar(self):
        """T·∫°o status bar"""
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)

        # Label cho th·ªùi gian
        self.time_label = QLabel()
        self.status_bar.addPermanentWidget(self.time_label)

        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.status_bar.addPermanentWidget(self.progress_bar)

        # Hi·ªÉn th·ªã th√¥ng b√°o kh·ªüi t·∫°o
        self.status_bar.showMessage("S·∫µn s√†ng", 2000)

    def delayed_load_data(self):
        """Load data sau khi UI ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ho√†n to√†n"""
        try:
            # Load sites v·ªõi error handling
            if hasattr(self.site_manager_tab, 'load_sites'):
                try:
                    self.site_manager_tab.load_sites()
                    print("ƒê√£ load sites th√†nh c√¥ng")
                except Exception as e:
                    print(f"L·ªói load sites: {e}")

            # Load categories v·ªõi error handling
            if hasattr(self.category_manager_tab, 'load_sites'):
                try:
                    self.category_manager_tab.load_sites()
                    print("ƒê√£ load categories sites th√†nh c√¥ng")
                except Exception as e:
                    print(f"L·ªói load categories sites: {e}")

            # Load product data
            if hasattr(self.product_manager_tab, 'load_data'):
                try:
                    self.product_manager_tab.load_data()
                    print("ƒê√£ load products th√†nh c√¥ng")
                except Exception as e:
                    print(f"L·ªói load products: {e}")

            # T·∫°m th·ªùi b·ªè qua folder scanner ƒë·ªÉ tr√°nh l·ªói
            # if hasattr(self.folder_scanner_tab, 'load_data'):
            #     self.folder_scanner_tab.load_data()

        except Exception as e:
            print(f"L·ªói load data: {str(e)}")

    def setup_connections(self):
        """Thi·∫øt l·∫≠p k·∫øt n·ªëi signals/slots"""
        # K·∫øt n·ªëi signal status_message
        self.status_message.connect(self.status_bar.showMessage)

        # K·∫øt n·ªëi t·ª´ c√°c tab
        self.site_manager_tab.status_message.connect(self.status_bar.showMessage)
        self.product_manager_tab.status_message.connect(self.status_bar.showMessage)

        # K·∫øt n·ªëi progress signals
        self.site_manager_tab.progress_started.connect(self.show_progress)
        self.site_manager_tab.progress_finished.connect(self.hide_progress)
        self.product_manager_tab.progress_started.connect(self.show_progress)
        self.product_manager_tab.progress_finished.connect(self.hide_progress)

    def update_time(self):
        """C·∫≠p nh·∫≠t th·ªùi gian tr√™n status bar"""
        from datetime import datetime
        current_time = datetime.now().strftime("%H:%M:%S - %d/%m/%Y")
        self.time_label.setText(current_time)

    def show_progress(self):
        """Hi·ªÉn th·ªã progress bar"""
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)  # Indeterminate progress

    def hide_progress(self):
        """·∫®n progress bar"""
        self.progress_bar.setVisible(False)

    def refresh_all(self):
        """L√†m m·ªõi t·∫•t c·∫£ d·ªØ li·ªáu"""
        try:
            self.show_progress()
            self.status_message.emit("ƒêang l√†m m·ªõi d·ªØ li·ªáu...")

            # Refresh site manager
            self.site_manager_tab.refresh_data()

            # Refresh product manager
            self.product_manager_tab.refresh_data()

            self.status_message.emit("ƒê√£ l√†m m·ªõi d·ªØ li·ªáu th√†nh c√¥ng")

        except Exception as e:
            self.logger.error(f"L·ªói khi l√†m m·ªõi d·ªØ li·ªáu: {str(e)}")
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l√†m m·ªõi d·ªØ li·ªáu:\n{str(e)}")
        finally:
            self.hide_progress()

    def import_csv(self):
        """Import d·ªØ li·ªáu t·ª´ CSV"""
        current_tab = self.tab_widget.currentWidget()
        if hasattr(current_tab, 'import_csv'):
            current_tab.import_csv()
        else:
            QMessageBox.information(self, "Th√¥ng b√°o", "Ch·ª©c nƒÉng import kh√¥ng kh·∫£ d·ª•ng cho tab n√†y")

    def export_csv(self):
        """Export d·ªØ li·ªáu ra CSV"""
        current_tab = self.tab_widget.currentWidget()
        if hasattr(current_tab, 'export_csv'):
            current_tab.export_csv()
        else:
            QMessageBox.information(self, "Th√¥ng b√°o", "Ch·ª©c nƒÉng export kh√¥ng kh·∫£ d·ª•ng cho tab n√†y")

    def sync_products(self):
        """ƒê·ªìng b·ªô s·∫£n ph·∫©m t·ª´ c√°c site"""
        if self.tab_widget.currentWidget() == self.product_manager_tab:
            self.product_manager_tab.sync_all_products()
        else:
            # Switch to product tab and sync
            self.tab_widget.setCurrentWidget(self.product_manager_tab)
            self.product_manager_tab.sync_all_products()

    def show_about(self):
        """Hi·ªÉn th·ªã th√¥ng tin v·ªÅ ·ª©ng d·ª•ng"""
        about_text = f"""
        <h2>WooCommerce Product Manager v1.0.0</h2>
        <p><b>·ª®ng d·ª•ng qu·∫£n l√Ω s·∫£n ph·∫©m ƒëa site WooCommerce</b></p>
        <p>H·ªó tr·ª£ k·∫øt n·ªëi v√† qu·∫£n l√Ω s·∫£n ph·∫©m t·ª´ nhi·ªÅu c·ª≠a h√†ng WooCommerce</p>

        <h3>T√≠nh nƒÉng:</h3>
        <ul>
        <li>‚Ä¢ Qu·∫£n l√Ω nhi·ªÅu site WooCommerce</li>
        <li>‚Ä¢ CRUD s·∫£n ph·∫©m</li>
        <li>‚Ä¢ Import/Export CSV</li>
        <li>‚Ä¢ ƒê·ªìng b·ªô d·ªØ li·ªáu</li>
        <li>‚Ä¢ T√¨m ki·∫øm v√† l·ªçc</li>
        </ul>

        <h3>T√°c gi·∫£:</h3>
        <p><b>H·ªçc Tr·∫ßn</b></p>
        <p>Telegram: <a href="https://t.me/anh2nd">@anh2nd</a></p>
        """

        QMessageBox.about(self, "V·ªÅ ·ª©ng d·ª•ng", about_text)

    def create_default_icon(self):
        """T·∫°o icon m·∫∑c ƒë·ªãnh ƒë∆°n gi·∫£n"""
        try:
            # Th·ª≠ load t·ª´ file tr∆∞·ªõc
            if os.path.exists("attached_assets/woo-Photoroom.png"):
                return QIcon("attached_assets/woo-Photoroom.png")
            elif os.path.exists("icon.png"):
                return QIcon("icon.png")

            # T·∫°o icon ƒë∆°n gi·∫£n b·∫±ng code
            pixmap = QPixmap(32, 32)
            pixmap.fill(Qt.GlobalColor.blue)
            return QIcon(pixmap)

        except Exception:
            # Tr·∫£ v·ªÅ icon r·ªóng n·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c
            return QIcon()

    def closeEvent(self, event):
        """X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng ·ª©ng d·ª•ng"""
        reply = QMessageBox.question(self, "X√°c nh·∫≠n", 
                                   "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t ·ª©ng d·ª•ng?",
                                   QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                                   QMessageBox.StandardButton.No)

        if reply == QMessageBox.StandardButton.Yes:
            self.logger.info("ƒê√≥ng ·ª©ng d·ª•ng")
            event.accept()
        else:
            event.ignore()