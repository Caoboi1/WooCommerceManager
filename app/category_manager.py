"""
Category Manager - Tab qu·∫£n l√Ω danh m·ª•c s·∫£n ph·∫©m
"""

import logging
from typing import List, Dict, Optional
from PyQt6.QtWidgets import *
from PyQt6.QtCore import *
from PyQt6.QtGui import *

from .models import Site
from .database import DatabaseManager
from .woocommerce_api import WooCommerceAPI
from .category_dialog import CategoryDialog
from .bulk_category_dialog import BulkCategoryDialog


class CategorySyncWorker(QThread):
    """Worker thread ƒë·ªÉ ƒë·ªìng b·ªô categories"""

    progress_updated = pyqtSignal(int, str)  # progress value, status message
    finished = pyqtSignal(bool, str)  # success, message
    category_synced = pyqtSignal(dict)  # category data

    def __init__(self, site: Site):
        super().__init__()
        self.site = site
        self.logger = logging.getLogger(__name__)

    def run(self):
        """Th·ª±c hi·ªán ƒë·ªìng b·ªô categories"""
        try:
            self.progress_updated.emit(10, f"K·∫øt n·ªëi ƒë·∫øn {self.site.name}...")

            # Kh·ªüi t·∫°o API
            api = WooCommerceAPI(self.site)

            self.progress_updated.emit(30, "L·∫•y danh s√°ch categories...")

            # L·∫•y t·∫•t c·∫£ categories t·ª´ WooCommerce
            categories = api.get_categories()

            if not categories:
                self.finished.emit(
                    False, "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu categories t·ª´ WooCommerce")
                return

            self.progress_updated.emit(
                50, f"ƒê·ªìng b·ªô {len(categories)} categories...")

            # L∆∞u v√†o database
            db = DatabaseManager()
            db.save_categories_from_api(self.site.id, categories)

            self.progress_updated.emit(100, "Ho√†n th√†nh!")
            self.finished.emit(
                True, f"ƒê√£ ƒë·ªìng b·ªô {len(categories)} categories th√†nh c√¥ng")

        except Exception as e:
            self.logger.error(f"L·ªói sync categories: {str(e)}")
            self.finished.emit(False, f"L·ªói ƒë·ªìng b·ªô: {str(e)}")


class CategoryManagerTab(QWidget):
    """Tab qu·∫£n l√Ω danh m·ª•c s·∫£n ph·∫©m"""

    def __init__(self):
        super().__init__()
        self.db = DatabaseManager()
        self.logger = logging.getLogger(__name__)
        self.sync_worker = None
        self.is_initializing = True  # Flag ƒë·ªÉ ngƒÉn dialog khi kh·ªüi t·∫°o

        self.init_ui()
        self.load_sites()
        self.load_categories()

        # Ho√†n th√†nh kh·ªüi t·∫°o v√† k·∫øt n·ªëi signal
        self.is_initializing = False
        self.table.itemChanged.connect(self.on_item_changed)

    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán"""
        layout = QVBoxLayout(self)
        layout.setSpacing(5)  # Gi·∫£m spacing t·ª´ 10 xu·ªëng 5
        layout.setContentsMargins(5, 5, 5, 5)  # Gi·∫£m margins t·ª´ 10 xu·ªëng 5

        # Header v·ªõi controls
        header_layout = QHBoxLayout()

        # Site selection
        site_label = QLabel("Site:")
        site_label.setFont(QFont("Arial", 10, QFont.Weight.Bold))
        header_layout.addWidget(site_label)

        self.site_combo = QComboBox()
        self.site_combo.setMinimumWidth(200)
        self.site_combo.currentTextChanged.connect(self.filter_categories)
        header_layout.addWidget(self.site_combo)

        header_layout.addSpacing(20)

        # Search
        search_label = QLabel("T√¨m ki·∫øm:")
        search_label.setFont(QFont("Arial", 10, QFont.Weight.Bold))
        header_layout.addWidget(search_label)

        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("Nh·∫≠p t√™n danh m·ª•c ho·∫∑c slug...")
        self.search_edit.setMinimumWidth(250)
        self.search_edit.textChanged.connect(self.filter_categories)
        header_layout.addWidget(self.search_edit)

        header_layout.addStretch()

        # Buttons
        self.sync_btn = QPushButton("üîÑ ƒê·ªìng b·ªô danh m·ª•c")
        self.sync_btn.clicked.connect(self.sync_categories)
        self.sync_btn.setToolTip("ƒê·ªìng b·ªô danh m·ª•c t·ª´ site ƒë∆∞·ª£c ch·ªçn")
        header_layout.addWidget(self.sync_btn)

        self.add_btn = QPushButton("‚ûï Th√™m Danh m·ª•c")
        self.add_btn.clicked.connect(self.add_category)
        header_layout.addWidget(self.add_btn)

        self.bulk_add_btn = QPushButton("üå≥ T·∫°o c·∫•u tr√∫c c√¢y")
        self.bulk_add_btn.clicked.connect(self.bulk_add_categories)
        header_layout.addWidget(self.bulk_add_btn)

        self.edit_btn = QPushButton("‚úèÔ∏è S·ª≠a")
        self.edit_btn.clicked.connect(self.edit_category)
        self.edit_btn.setEnabled(False)
        header_layout.addWidget(self.edit_btn)

        self.delete_btn = QPushButton("üóëÔ∏è X√≥a")
        self.delete_btn.clicked.connect(self.delete_category)
        self.delete_btn.setEnabled(False)
        header_layout.addWidget(self.delete_btn)

        self.debug_btn = QPushButton("üîç Debug Mapping")
        self.debug_btn.clicked.connect(self.debug_category_mapping)
        header_layout.addWidget(self.debug_btn)

        layout.addLayout(header_layout)

        # Splitter cho table v√† details
        splitter = QSplitter(Qt.Orientation.Horizontal)

        # Table v·ªõi hi·ªÉn th·ªã th·ª•t l·ªÅ cho c·∫•u tr√∫c cha-con
        self.table = QTableWidget()
        self.table.setSelectionBehavior(
            QAbstractItemView.SelectionBehavior.SelectRows)
        self.table.setAlternatingRowColors(True)
        self.table.setSortingEnabled(True)

        # Categories table
        self.table = QTableWidget()
        self.table.setColumnCount(9)
        self.table.setHorizontalHeaderLabels([
            "ID", "Site", "T√™n danh m·ª•c", "Slug", "M√¥ t·∫£", "·∫¢nh",
            "S·ªë s·∫£n ph·∫©m", "Parent", "WC ID"
        ])

        # C·∫•u h√¨nh responsive grid layout cho categories
        header = self.table.horizontalHeader()
        if header:
            # Thi·∫øt l·∫≠p resize modes t·ªëi ∆∞u cho t·ª´ng c·ªôt
            header.setSectionResizeMode(
                0, QHeaderView.ResizeMode.Fixed)  # ID - c·ªë ƒë·ªãnh
            header.setSectionResizeMode(1,
                                        QHeaderView.ResizeMode.ResizeToContents
                                        )  # Site - theo n·ªôi dung
            header.setSectionResizeMode(
                2,
                QHeaderView.ResizeMode.Stretch)  # T√™n danh m·ª•c - co d√£n ch√≠nh
            header.setSectionResizeMode(
                3, QHeaderView.ResizeMode.Stretch)  # Slug - co d√£n
            header.setSectionResizeMode(
                4, QHeaderView.ResizeMode.Stretch)  # M√¥ t·∫£ - co d√£n
            header.setSectionResizeMode(
                5, QHeaderView.ResizeMode.Fixed)  # ·∫¢nh - c·ªë ƒë·ªãnh
            header.setSectionResizeMode(
                6, QHeaderView.ResizeMode.Fixed)  # S·ªë s·∫£n ph·∫©m - c·ªë ƒë·ªãnh
            header.setSectionResizeMode(7,
                                        QHeaderView.ResizeMode.ResizeToContents
                                        )  # Parent - theo n·ªôi dung
            header.setSectionResizeMode(
                8, QHeaderView.ResizeMode.Fixed)  # WC ID - c·ªë ƒë·ªãnh

            # Thi·∫øt l·∫≠p width c·ªë ƒë·ªãnh cho c√°c c·ªôt Fixed
            self.table.setColumnWidth(0, 50)  # ID
            self.table.setColumnWidth(5, 80)  # ·∫¢nh
            self.table.setColumnWidth(6, 90)  # S·ªë s·∫£n ph·∫©m
            self.table.setColumnWidth(8, 80)  # WC ID

            # C·∫•u h√¨nh responsive header
            header.setStretchLastSection(False)
            header.setMinimumSectionSize(40)
            header.setDefaultSectionSize(120)

        self.table.setSelectionBehavior(
            QTableWidget.SelectionBehavior.SelectRows)
        self.table.setAlternatingRowColors(True)
        self.table.selectionModel().selectionChanged.connect(
            self.on_selection_changed)

        # Enable inline editing (k·∫øt n·ªëi signal sau khi kh·ªüi t·∫°o xong)
        self.table.setEditTriggers(
            QAbstractItemView.EditTrigger.DoubleClicked
            | QAbstractItemView.EditTrigger.EditKeyPressed)

        splitter.addWidget(self.table)

        # Category details panel
        details_group = QGroupBox("Chi ti·∫øt Danh m·ª•c")
        details_layout = QVBoxLayout(details_group)

        # ƒêi·ªÅu ch·ªânh QTextEdit ƒë·ªÉ n√≥ l·∫•p ƒë·∫ßy chi·ªÅu cao c·ªßa GroupBox
        self.details_text = QTextEdit()
        self.details_text.setReadOnly(True)
        # B·ªè c√°c gi·ªõi h·∫°n chi·ªÅu cao
        # self.details_text.setMaximumHeight(120)  
        # self.details_text.setMinimumHeight(80)   
        details_layout.addWidget(self.details_text)

        splitter.addWidget(details_group)
        # ƒêi·ªÅu ch·ªânh t·ª∑ l·ªá chia gi·ªØa b·∫£ng v√† chi ti·∫øt (700:300 thay v√¨ 700:200)
        splitter.setSizes([700, 300])

        layout.addWidget(splitter)

        # Stats panel - compact version
        stats_group = QGroupBox("Th·ªëng k√™")
        stats_group.setMaximumHeight(60)  # Gi·ªõi h·∫°n chi·ªÅu cao
        stats_layout = QHBoxLayout(stats_group)
        stats_layout.setContentsMargins(10, 5, 10, 5)  # Gi·∫£m margins

        self.total_label = QLabel("T·ªïng: 0")
        self.synced_label = QLabel("ƒê√£ ƒë·ªìng b·ªô: 0")
        self.parent_label = QLabel("Danh m·ª•c cha: 0")
        self.child_label = QLabel("Danh m·ª•c con: 0")

        for label in [
                self.total_label, self.synced_label, self.parent_label,
                self.child_label
        ]:
            label.setFont(QFont("Arial", 8))  # Font nh·ªè h∆°n
            label.setStyleSheet(
                "color: #555; padding: 2px 8px; margin: 2px;")  # Style compact
            stats_layout.addWidget(label)

        stats_layout.addStretch()
        layout.addWidget(stats_group)

        # Progress bar and status (initially hidden) - compact version
        progress_widget = QWidget()
        progress_widget.setMaximumHeight(30)  # Gi·ªõi h·∫°n chi·ªÅu cao
        progress_layout = QHBoxLayout(progress_widget)
        progress_layout.setContentsMargins(0, 0, 0, 0)  # Lo·∫°i b·ªè margins
        progress_layout.setSpacing(5)

        self.status_label = QLabel("S·∫µn s√†ng")
        self.status_label.setFont(QFont("Arial", 8))  # Font nh·ªè h∆°n
        self.status_label.setStyleSheet("color: #666; padding: 2px;")
        progress_layout.addWidget(self.status_label)

        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setMaximum(100)
        self.progress_bar.setMaximumHeight(20)  # Gi·ªõi h·∫°n chi·ªÅu cao progress bar
        progress_layout.addWidget(self.progress_bar)

        layout.addWidget(progress_widget)

        # Kh√¥ng th√™m stretch ƒë·ªÉ layout s√°t xu·ªëng d∆∞·ªõi

    def load_sites(self):
        """Load danh s√°ch sites"""
        try:
            sites = self.db.get_all_sites()
            self.site_combo.clear()
            self.site_combo.addItem("T·∫•t c·∫£ sites", None)

            for site in sites:
                self.site_combo.addItem(site.name, site.id)

        except Exception as e:
            self.logger.error(f"L·ªói load sites: {str(e)}")

    def load_categories(self):
        """Load danh s√°ch categories"""
        try:
            categories = self.db.get_all_categories()
            self.display_categories(categories)
            self.update_stats(categories)

        except Exception as e:
            self.logger.error(f"L·ªói load categories: {str(e)}")
            QMessageBox.critical(self, "L·ªói",
                                 f"Kh√¥ng th·ªÉ t·∫£i categories: {str(e)}")

    def display_categories(self, categories: List[Dict]):
        """Hi·ªÉn th·ªã categories trong table v·ªõi th·ª•t l·ªÅ theo c·∫•u tr√∫c cha-con"""
        try:
            # T·∫°m th·ªùi disconnect signal ƒë·ªÉ tr√°nh trigger dialog khi populate data
            try:
                self.table.itemChanged.disconnect()
            except:
                pass  # Signal c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi

            # Clear table tr∆∞·ªõc
            self.table.setRowCount(0)
            # T·∫°o dict ƒë·ªÉ lookup categories
            local_id_to_category = {}
            parent_children = {}
            root_categories = []

            # Build lookup dictionary - s·ª≠ d·ª•ng wc_category_id thay v√¨ local id
            for category in categories:
                local_id = category.get('id')
                wc_id = category.get('wc_category_id')
                if local_id:
                    local_id_to_category[local_id] = category
                if wc_id:
                    local_id_to_category[wc_id] = category

            # Ph√¢n lo·∫°i categories th√†nh root v√† children d·ª±a tr√™n parent_id
            for category in categories:
                parent_id = category.get('parent_id')

                if not parent_id or parent_id == 0:
                    root_categories.append(category)
                else:
                    # Ki·ªÉm tra parent c√≥ t·ªìn t·∫°i trong danh s√°ch kh√¥ng
                    if parent_id in local_id_to_category:
                        if parent_id not in parent_children:
                            parent_children[parent_id] = []
                        parent_children[parent_id].append(category)
                    else:
                        # N·∫øu kh√¥ng t√¨m th·∫•y parent trong danh s√°ch hi·ªán t·∫°i, coi nh∆∞ root
                        root_categories.append(category)

            # T·∫°o danh s√°ch categories theo th·ª© t·ª± hi·ªÉn th·ªã v·ªõi c·∫•u tr√∫c c√¢y
            ordered_categories = []

            # S·∫Øp x·∫øp root categories theo t√™n
            root_categories.sort(key=lambda x: x.get('name', '').lower())

            def add_category_and_children(category,
                                          level=0,
                                          is_last_sibling=True,
                                          parent_prefixes=""):
                """Th√™m category v√† children c·ªßa n√≥ v√†o danh s√°ch ordered v·ªõi tree structure"""
                ordered_categories.append(
                    (category, level, is_last_sibling, parent_prefixes))

                # Th√™m children n·∫øu c√≥
                category_id = category.get('id')
                wc_id = category.get('wc_category_id')

                children = []
                if category_id and category_id in parent_children:
                    children = parent_children[category_id]
                elif wc_id and wc_id in parent_children:
                    children = parent_children[wc_id]

                if children:
                    children = sorted(children,
                                      key=lambda x: x.get('name', '').lower())

                    # T·∫°o prefix cho children
                    if level == 0:
                        new_parent_prefixes = ""
                    else:
                        if is_last_sibling:
                            new_parent_prefixes = parent_prefixes + "    "
                        else:
                            new_parent_prefixes = parent_prefixes + "‚îÇ   "

                    for i, child in enumerate(children):
                        is_last_child = (i == len(children) - 1)
                        add_category_and_children(child, level + 1,
                                                  is_last_child,
                                                  new_parent_prefixes)

            # X√¢y d·ª±ng c·∫•u tr√∫c c√¢y
            for i, root_category in enumerate(root_categories):
                is_last_root = (i == len(root_categories) - 1)
                add_category_and_children(root_category, 0, is_last_root, "")

            # Hi·ªÉn th·ªã trong table
            self.table.setRowCount(len(ordered_categories))

            for row, (category, level, is_last_sibling,
                      parent_prefixes) in enumerate(ordered_categories):
                # ID
                item = QTableWidgetItem(str(category.get('id', '')))
                item.setData(Qt.ItemDataRole.UserRole, category)
                self.table.setItem(row, 0, item)

                # Site name
                site_name = ""
                if category.get('site_id'):
                    site = self.db.get_site_by_id(category['site_id'])
                    if site:
                        site_name = site.name if hasattr(
                            site, 'name') else str(site.get('name', ''))
                self.table.setItem(row, 1, QTableWidgetItem(site_name))

                # T√™n v·ªõi tree structure nh∆∞ trong h√¨nh
                name = str(category.get('name', ''))
                if level > 0:
                    # T·∫°o tree structure v·ªõi c√°c k√Ω t·ª± box drawing
                    tree_prefix = parent_prefixes
                    if is_last_sibling:
                        tree_prefix += "‚îî‚îÄ‚îÄ "
                    else:
                        tree_prefix += "‚îú‚îÄ‚îÄ "
                    name = tree_prefix + name

                # T·∫°o font ƒë·∫≠m cho parent categories (level 0)
                name_item = QTableWidgetItem(name)
                if level == 0:
                    font = name_item.font()
                    font.setBold(True)
                    name_item.setFont(font)
                    # Th√™m icon folder cho categories cha
                    name_item.setText("üìÅ " + name)
                elif level == 1:
                    # Icon cho categories con c·∫•p 1
                    if name.strip().endswith("‚îú‚îÄ‚îÄ " +
                                             category.get('name', '')):
                        name_item.setText(
                            name.replace("‚îú‚îÄ‚îÄ ",
                                         "‚îú‚îÄ‚îÄ üìÇ ").replace("‚îî‚îÄ‚îÄ ", "‚îî‚îÄ‚îÄ üìÇ "))
                    else:
                        name_item.setText(name)
                else:
                    # Icon cho categories con c·∫•p 2+
                    if "‚îú‚îÄ‚îÄ " in name or "‚îî‚îÄ‚îÄ " in name:
                        name_item.setText(
                            name.replace("‚îú‚îÄ‚îÄ ",
                                         "‚îú‚îÄ‚îÄ üìÑ ").replace("‚îî‚îÄ‚îÄ ", "‚îî‚îÄ‚îÄ üìÑ "))
                    else:
                        name_item.setText(name)

                # Cho ph√©p ch·ªânh s·ª≠a name n·∫øu c√≥ WC ID (ƒë√£ ƒë·ªìng b·ªô)
                if category.get('wc_category_id'):
                    name_item.setFlags(name_item.flags()
                                       | Qt.ItemFlag.ItemIsEditable)
                    name_item.setToolTip("Double-click ƒë·ªÉ ch·ªânh s·ª≠a tr·ª±c ti·∫øp")
                else:
                    name_item.setFlags(name_item.flags()
                                       & ~Qt.ItemFlag.ItemIsEditable)
                    name_item.setToolTip(
                        "Category ch∆∞a ƒë·ªìng b·ªô - kh√¥ng th·ªÉ ch·ªânh s·ª≠a tr·ª±c ti·∫øp"
                    )

                self.table.setItem(row, 2, name_item)

                # Slug
                slug_item = QTableWidgetItem(str(category.get('slug', '')))
                if category.get('wc_category_id'):
                    slug_item.setFlags(slug_item.flags()
                                       | Qt.ItemFlag.ItemIsEditable)
                    slug_item.setToolTip(
                        "Double-click ƒë·ªÉ ch·ªânh s·ª≠a slug tr·ª±c ti·∫øp")
                else:
                    slug_item.setFlags(slug_item.flags()
                                       & ~Qt.ItemFlag.ItemIsEditable)
                    slug_item.setToolTip(
                        "Category ch∆∞a ƒë·ªìng b·ªô - kh√¥ng th·ªÉ ch·ªânh s·ª≠a tr·ª±c ti·∫øp"
                    )
                self.table.setItem(row, 3, slug_item)

                # M√¥ t·∫£ (hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß h∆°n)
                description = str(category.get('description', ''))
                # Lo·∫°i b·ªè HTML tags n·∫øu c√≥
                import re
                clean_description = re.sub(r'<[^>]+>', '', description)
                clean_description = clean_description.strip()

                # Hi·ªÉn th·ªã t·ªëi ƒëa 200 k√Ω t·ª± thay v√¨ 100
                if len(clean_description) > 200:
                    display_description = clean_description[:197] + "..."
                else:
                    display_description = clean_description

                desc_item = QTableWidgetItem(display_description)
                desc_item.setToolTip(
                    clean_description)  # Full description in tooltip

                # Cho ph√©p ch·ªânh s·ª≠a description
                if category.get('wc_category_id'):
                    desc_item.setFlags(desc_item.flags()
                                       | Qt.ItemFlag.ItemIsEditable)
                    desc_item.setToolTip(
                        clean_description +
                        "\n\nDouble-click ƒë·ªÉ ch·ªânh s·ª≠a tr·ª±c ti·∫øp")
                else:
                    desc_item.setFlags(desc_item.flags()
                                       & ~Qt.ItemFlag.ItemIsEditable)
                    desc_item.setToolTip(
                        clean_description +
                        "\n\nCategory ch∆∞a ƒë·ªìng b·ªô - kh√¥ng th·ªÉ ch·ªânh s·ª≠a tr·ª±c ti·∫øp"
                    )

                self.table.setItem(row, 4, desc_item)

                # ·∫¢nh - hi·ªÉn th·ªã thumbnail n·∫øu c√≥
                image_item = QTableWidgetItem()
                image_url = category.get('image', '')
                if image_url:
                    # T·∫°o label ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh
                    image_widget = QLabel()
                    image_widget.setAlignment(Qt.AlignmentFlag.AlignCenter)
                    image_widget.setFixedSize(70, 70)
                    image_widget.setStyleSheet(
                        "border: 1px solid #ddd; background: #f9f9f9;")

                    try:
                        # Load image t·ª´ URL ho·∫∑c file path
                        if image_url.startswith(('http://', 'https://')):
                            # TODO: Load image from URL (c·∫ßn implement async loading)
                            image_widget.setText("üñºÔ∏è")
                        else:
                            # Load local image
                            pixmap = QPixmap(image_url)
                            if not pixmap.isNull():
                                scaled_pixmap = pixmap.scaled(
                                    68, 68, Qt.AspectRatioMode.KeepAspectRatio,
                                    Qt.TransformationMode.SmoothTransformation)
                                image_widget.setPixmap(scaled_pixmap)
                            else:
                                image_widget.setText("‚ùå")
                    except:
                        image_widget.setText("‚ùå")

                    self.table.setCellWidget(row, 5, image_widget)
                    image_item.setToolTip(f"·∫¢nh: {image_url}")
                else:
                    image_item.setText("Kh√¥ng c√≥")
                self.table.setItem(row, 5, image_item)

                # S·ªë s·∫£n ph·∫©m
                product_count = self.get_category_product_count(category)
                self.table.setItem(row, 6,
                                   QTableWidgetItem(str(product_count)))

                # Parent - hi·ªÉn th·ªã t√™n parent thay v√¨ ID
                parent_name = ""
                parent_id = category.get('parent_id')
                if parent_id and parent_id in local_id_to_category:
                    parent_name = local_id_to_category[parent_id].get(
                        'name', '')
                self.table.setItem(row, 7, QTableWidgetItem(parent_name))

                # WC ID
                wc_id = category.get('wc_category_id', '')
                self.table.setItem(
                    row, 8, QTableWidgetItem(str(wc_id) if wc_id else ""))

        except Exception as e:
            self.logger.error(f"L·ªói hi·ªÉn th·ªã categories: {str(e)}")
            QMessageBox.critical(self, "L·ªói",
                                 f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã categories:\n{str(e)}")
        finally:
            # Reconnect signal sau khi populate xong data
            try:
                self.table.itemChanged.connect(self.on_item_changed)
            except:
                pass  # Signal c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi r·ªìi

    def create_category_tree_item(self, category: Dict):
        """T·∫°o tree item cho m·ªôt category"""
        try:
            # L·∫•y th√¥ng tin site
            site_name = ""
            if category.get('site_id'):
                site = self.db.get_site_by_id(category['site_id'])
                if site:
                    site_name = site.name if hasattr(site, 'name') else str(
                        site.get('name', ''))

            # L·∫•y s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
            product_count = self.get_category_product_count(category)

            # T·∫°o item v·ªõi c√°c c·ªôt
            item = QTreeWidgetItem([
                str(category.get('name', '')),  # T√™n danh m·ª•c
                str(category.get('slug', '')),  # Slug
                str(product_count),  # S·ªë s·∫£n ph·∫©m
                site_name,  # Site
                str(category.get('wc_category_id', '')),  # WC ID
                str(category.get('description', ''))[:100]  # M√¥ t·∫£ (r√∫t g·ªçn)
            ])

            # L∆∞u data v√†o item
            item.setData(0, Qt.ItemDataRole.UserRole, category)

            # ƒê·∫∑t icon cho danh m·ª•c cha
            if category.get('parent_id', 0) == 0:
                item.setIcon(
                    0,
                    self.style().standardIcon(
                        self.style().StandardPixmap.SP_DirIcon))
            else:
                item.setIcon(
                    0,
                    self.style().standardIcon(
                        self.style().StandardPixmap.SP_FileIcon))

            return item

        except Exception as e:
            self.logger.error(f"L·ªói t·∫°o tree item: {str(e)}")
            return QTreeWidgetItem([str(category.get('name', 'L·ªói'))])

    def add_children_recursive(self, parent_item, parent_id, parent_children,
                               category_dict):
        """Th√™m children cho parent item m·ªôt c√°ch ƒë·ªá quy"""
        if parent_id in parent_children:
            for child_category in parent_children[parent_id]:
                child_item = self.create_category_tree_item(child_category)
                parent_item.addChild(child_item)

                # ƒê·ªá quy th√™m children c·ªßa children
                child_id = child_category.get('id')
                self.add_children_recursive(child_item, child_id,
                                            parent_children, category_dict)

    def get_category_product_count(self, category: Dict) -> int:
        """L·∫•y s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong category"""
        try:
            # ∆Øu ti√™n l·∫•y t·ª´ count field trong database
            if 'count' in category and category['count'] is not None:
                return int(category['count'])

            # N·∫øu kh√¥ng c√≥, th·ª≠ l·∫•y t·ª´ database products
            category_id = category.get('id')
            if category_id and hasattr(self.db, 'get_products_by_category'):
                products = self.db.get_products_by_category(category_id)
                return len(products) if products else 0

            return 0

        except Exception as e:
            self.logger.error(f"L·ªói l·∫•y product count: {str(e)}")
            return 0

    def filter_categories(self):
        """L·ªçc categories theo site v√† search"""
        try:
            site_id = self.site_combo.currentData()
            site_text = self.site_combo.currentText()
            search_term = self.search_edit.text().lower()

            # Debug logging
            self.logger.debug(f"Filtering categories - Site ID: {site_id}, Site Text: {site_text}, Search: {search_term}")

            # Ki·ªÉm tra ƒëi·ªÅu ki·ªán l·ªçc site - ch·ªâ l·ªçc khi ch·ªçn site c·ª• th·ªÉ
            if site_id and site_id != 0 and site_text != "T·∫•t c·∫£ sites":  
                categories = self.db.get_categories_by_site(site_id)
                self.logger.debug(f"Found {len(categories)} categories for site_id {site_id}")
            else:
                categories = self.db.get_all_categories()
                self.logger.debug(f"Found {len(categories)} total categories")

            # Debug: Log first few categories to check data
            if categories:
                for i, category in enumerate(categories[:3]):
                    self.logger.debug(f"Category {i}: site_id={category.get('site_id')}, site_name={category.get('site_name')}, name={category.get('name')}")

            # Filter by search term
            if search_term:
                filtered_categories = []
                for category in categories:
                    name = category.get('name', '')
                    if isinstance(name, dict):
                        name = name.get('rendered', '')

                    if (search_term in str(name).lower() or 
                        search_term in str(category.get('slug', '')).lower()):
                        filtered_categories.append(category)
                categories = filtered_categories

            self.display_categories(categories)
            self.update_stats(categories)

        except Exception as e:
            self.logger.error(f"L·ªói filter categories: {str(e)}")

    def update_stats(self, categories: List[Dict]):
        """C·∫≠p nh·∫≠t th·ªëng k√™"""
        try:
            total = len(categories)
            synced = len(
                [cat for cat in categories if cat.get('wc_category_id')])
            parents = len([
                cat for cat in categories
                if not cat.get('parent_id') or cat.get('parent_id') == 0
            ])
            children = total - parents

            self.total_label.setText(f"T·ªïng: {total}")
            self.synced_label.setText(f"ƒê√£ ƒë·ªìng b·ªô: {synced}")
            self.parent_label.setText(f"Danh m·ª•c cha: {parents}")
            self.child_label.setText(f"Danh m·ª•c con: {children}")

        except Exception as e:
            self.logger.error(f"L·ªói update stats: {str(e)}")

    def on_selection_changed(self):
        """X·ª≠ l√Ω khi selection thay ƒë·ªïi"""
        selected_rows = self.table.selectionModel().selectedRows()
        has_selection = len(selected_rows) > 0

        self.edit_btn.setEnabled(has_selection)
        self.delete_btn.setEnabled(has_selection)

        if has_selection:
            row = selected_rows[0].row()
            item = self.table.item(row, 0)
            if item:
                category_data = item.data(Qt.ItemDataRole.UserRole)
                if category_data:
                    self.show_category_details(category_data)
        else:
            self.details_text.clear()

    def show_category_details(self, category: Dict):
        """Hi·ªÉn th·ªã chi ti·∫øt category"""
        try:
            name = category.get('name', '')
            description = category.get('description', '')

            # T√¨m parent name
            parent_name = "Kh√¥ng c√≥"
            parent_id = category.get('parent_id')
            if parent_id and parent_id != 0:
                # T√¨m parent trong danh s√°ch categories
                all_categories = self.db.get_all_categories()
                for cat in all_categories:
                    if cat.get('id') == parent_id or cat.get(
                            'wc_category_id') == parent_id:
                        parent_name = cat.get('name', f'ID: {parent_id}')
                        break

            details = f"""
<h3>{name}</h3>
<p><b>ID:</b> {category.get('id', 'N/A')}</p>
<p><b>Slug:</b> {category.get('slug', 'N/A')}</p>
<p><b>Tr·∫°ng th√°i:</b> {'ƒê√£ ƒë·ªìng b·ªô' if category.get('wc_category_id') else 'Ch∆∞a ƒë·ªìng b·ªô'}</p>
<p><b>S·ªë s·∫£n ph·∫©m:</b> {category.get('count', 0)}</p>
<p><b>Danh m·ª•c cha:</b> {parent_name}</p>
<p><b>WooCommerce ID:</b> {category.get('wc_category_id', 'Ch∆∞a ƒë·ªìng b·ªô')}</p>
<p><b>C·∫≠p nh·∫≠t:</b> {category.get('updated_at', 'N/A')}</p>
<p><b>M√¥ t·∫£:</b></p>
<p>{description[:300] + '...' if len(str(description)) > 300 else description}</p>
            """

            self.details_text.setHtml(details)

        except Exception as e:
            self.logger.error(f"L·ªói show category details: {str(e)}")

    def sync_categories(self):
        """ƒê·ªìng b·ªô categories t·ª´ site ƒë∆∞·ª£c ch·ªçn"""
        # L·∫•y site ƒë∆∞·ª£c ch·ªçn
        site_id = self.site_combo.currentData()

        if not site_id:
            QMessageBox.warning(self, "C·∫£nh b√°o", 
                                "Vui l√≤ng ch·ªçn m·ªôt site c·ª• th·ªÉ ƒë·ªÉ ƒë·ªìng b·ªô danh m·ª•c.\n\n"
                                "Kh√¥ng th·ªÉ ƒë·ªìng b·ªô khi ch·ªçn 'T·∫•t c·∫£ sites'.")
            return

        site = self.db.get_site_by_id(site_id)
        if not site:
            QMessageBox.warning(self, "C·∫£nh b√°o",
                                "Kh√¥ng t√¨m th·∫•y th√¥ng tin site")
            return

        # Hi·ªÉn th·ªã x√°c nh·∫≠n
        reply = QMessageBox.question(
            self, "X√°c nh·∫≠n ƒë·ªìng b·ªô",
            f"B·∫°n c√≥ mu·ªën ƒë·ªìng b·ªô danh m·ª•c t·ª´ site '{site.name}' kh√¥ng?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.Yes
        )

        if reply == QMessageBox.StandardButton.Yes:
            self.start_sync(site)            
    def start_sync(self, site):
        """B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô categories"""
        if self.sync_worker and self.sync_worker.isRunning():
            QMessageBox.warning(self, "C·∫£nh b√°o",
                                "ƒêang c√≥ ti·∫øn tr√¨nh ƒë·ªìng b·ªô kh√°c")
            return

        # Disable buttons
        self.sync_btn.setEnabled(False)
        if hasattr(self, 'progress_bar'):
            self.progress_bar.setVisible(True)
            self.progress_bar.setValue(0)
        if hasattr(self, 'status_label'):
            self.status_label.setText("ƒêang ƒë·ªìng b·ªô...")

        # Start worker
        self.sync_worker = CategorySyncWorker(site)
        self.sync_worker.progress_updated.connect(self.on_sync_progress)
        self.sync_worker.finished.connect(self.on_sync_finished)
        self.sync_worker.category_synced.connect(self.on_category_synced)
        self.sync_worker.start()

    def on_sync_progress(self, value: int, status: str):
        """C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô sync"""
        if hasattr(self, 'progress_bar'):
            self.progress_bar.setValue(value)
        if hasattr(self, 'status_label'):
            self.status_label.setText(status)

    def on_sync_finished(self, success: bool, message: str):
        """X·ª≠ l√Ω khi sync ho√†n th√†nh"""
        self.sync_btn.setEnabled(True)
        if hasattr(self, 'progress_bar'):
            self.progress_bar.setVisible(False)
        if hasattr(self, 'status_label'):
            self.status_label.setText("S·∫µn s√†ng")

        if success:
            QMessageBox.information(self, "Th√†nh c√¥ng", message)
            # √Åp d·ª•ng l·∫°i b·ªô l·ªçc thay v√¨ load t·∫•t c·∫£
            self.filter_categories()
        else:
            QMessageBox.critical(self, "L·ªói", message)

    def on_category_synced(self, category_data: Dict):
        """X·ª≠ l√Ω khi m·ªôt category ƒë∆∞·ª£c sync"""
        # C√≥ th·ªÉ c·∫≠p nh·∫≠t real-time n·∫øu c·∫ßn
        pass

    def create_category_on_site(self, category_data: Dict):
        """T·∫°o danh m·ª•c tr·ª±c ti·∫øp tr√™n site v√† ƒë·ªìng b·ªô v·ªÅ"""
        try:
            # Disable buttons
            self.add_btn.setEnabled(False)
            self.progress_bar.setVisible(True)
            self.progress_bar.setValue(0)
            self.status_label.setText("ƒêang t·∫°o danh m·ª•c tr√™n site...")

            # L·∫•y th√¥ng tin site
            site_id = category_data.get('site_id')
            site = self.db.get_site_by_id(site_id)
            if not site:
                QMessageBox.warning(self, "L·ªói",
                                    "Kh√¥ng t√¨m th·∫•y th√¥ng tin site")
                return

            # Kh·ªüi t·∫°o API
            from .woocommerce_api import WooCommerceAPI
            api = WooCommerceAPI(site)

            self.progress_bar.setValue(30)
            self.status_label.setText("Chu·∫©n b·ªã d·ªØ li·ªáu...")

            # Chu·∫©n b·ªã d·ªØ li·ªáu cho WooCommerce API
            wc_category_data = {
                'name':
                category_data['name'],
                'slug':
                category_data['slug'],
                'description':
                category_data.get('description', ''),
                'parent':
                category_data.get('parent', 0)
                if category_data.get('parent') else 0,
                'display':
                category_data.get('display', 'default'),
                'menu_order':
                category_data.get('menu_order', 0)
            }

            # Th√™m image n·∫øu c√≥
            if category_data.get('image'):
                wc_category_data['image'] = {'src': category_data['image']}

            self.progress_bar.setValue(50)
            self.status_label.setText("T·∫°o danh m·ª•c tr√™n site...")

            # T·∫°o danh m·ª•c tr√™n WooCommerce
            created_category = api.create_category(wc_category_data)

            self.progress_bar.setValue(80)
            self.status_label.setText("L∆∞u v√†o database...")

            if created_category:
                # L∆∞u v√†o database local v·ªõi wc_category_id
                category_data['wc_category_id'] = created_category.get('id')
                self.db.create_category(category_data)

                self.progress_bar.setValue(100)
                self.status_label.setText("Ho√†n th√†nh!")

                # Reload categories
                self.load_categories()

                QMessageBox.information(
                    self, "Th√†nh c√¥ng",
                    f"ƒê√£ t·∫°o danh m·ª•c '{category_data['name']}' tr√™n site v√† ƒë·ªìng b·ªô v·ªÅ database!"
                )
            else:
                # N·∫øu t·∫°o tr√™n site th·∫•t b·∫°i, h·ªèi user c√≥ mu·ªën l∆∞u local kh√¥ng
                reply = QMessageBox.question(
                    self, "L·ªói t·∫°o tr√™n site",
                    f"Kh√¥ng th·ªÉ t·∫°o danh m·ª•c '{category_data['name']}' tr√™n site.\n\n"
                    "B·∫°n c√≥ mu·ªën l∆∞u ch·ªâ trong database local kh√¥ng?",
                    QMessageBox.StandardButton.Yes
                    | QMessageBox.StandardButton.No)

                if reply == QMessageBox.StandardButton.Yes:
                    # X√≥a wc_category_id n·∫øu c√≥
                    category_data.pop('wc_category_id', None)
                    self.db.create_category(category_data)
                    self.load_categories()
                    QMessageBox.information(
                        self, "Th√†nh c√¥ng",
                        "ƒê√£ l∆∞u danh m·ª•c v√†o database local!")

        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"L·ªói t·∫°o category: {error_msg}")

            # Ki·ªÉm tra lo·∫°i l·ªói ƒë·ªÉ ƒë∆∞a ra th√¥ng b√°o ph√π h·ª£p
            if "Consumer Key kh√¥ng c√≥ quy·ªÅn" in error_msg or "insufficient_permission" in error_msg or "403" in error_msg:
                QMessageBox.warning(
                    self, "L·ªói quy·ªÅn h·∫°n", f"‚ùå {error_msg}\n\n"
                    "üí° Gi·∫£i ph√°p:\n"
                    "1. V√†o WooCommerce Admin ‚Üí WooCommerce ‚Üí Settings ‚Üí Advanced ‚Üí REST API\n"
                    "2. Ch·ªânh s·ª≠a Consumer Key hi·ªán t·∫°i\n"
                    "3. ƒê·∫£m b·∫£o Permissions = 'Read/Write'\n"
                    "4. Ho·∫∑c t·∫°o Consumer Key m·ªõi v·ªõi quy·ªÅn Read/Write\n\n"
                    "üîß L∆∞u √Ω: Consumer Key ch·ªâ c√≥ quy·ªÅn 'Read' kh√¥ng th·ªÉ t·∫°o/s·ª≠a d·ªØ li·ªáu"
                )
            elif "401" in error_msg or "x√°c th·ª±c" in error_msg:
                QMessageBox.warning(
                    self, "L·ªói x√°c th·ª±c", f"‚ùå {error_msg}\n\n"
                    "üí° Ki·ªÉm tra l·∫°i:\n"
                    "1. Consumer Key v√† Consumer Secret c√≥ ƒë√∫ng kh√¥ng\n"
                    "2. URL site c√≥ ch√≠nh x√°c kh√¥ng\n"
                    "3. WooCommerce REST API c√≥ ƒë∆∞·ª£c k√≠ch ho·∫°t kh√¥ng")
            elif "500" in error_msg or "Internal Server Error" in error_msg:
                QMessageBox.critical(
                    self, "L·ªói Server",
                    f"‚ùå L·ªói server khi t·∫°o category:\n{error_msg}\n\n"
                    "üí° C√≥ th·ªÉ do:\n"
                    "1. Category name ƒë√£ t·ªìn t·∫°i\n"
                    "2. Slug ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng\n"
                    "3. D·ªØ li·ªáu category kh√¥ng h·ª£p l·ªá\n"
                    "4. Plugin WooCommerce c√≥ v·∫•n ƒë·ªÅ\n"
                    "5. Database server qu√° t·∫£i\n\n"
                    "üîß Th·ª≠ l·∫°i:\n"
                    "- ƒê·ªïi t√™n category kh√°c\n"
                    "- Ki·ªÉm tra t√™n category c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát kh√¥ng\n"
                    "- Li√™n h·ªá admin website ki·ªÉm tra server")
            elif "ƒë√£ t·ªìn t·∫°i" in error_msg or "already exists" in error_msg:
                QMessageBox.warning(
                    self, "Category ƒë√£ t·ªìn t·∫°i", f"‚ùå {error_msg}\n\n"
                    "üí° Gi·∫£i ph√°p:\n"
                    "1. Thay ƒë·ªïi t√™n category\n"
                    "2. Ho·∫∑c s·ª≠ d·ª•ng category c√≥ s·∫µn")
            elif "kh√¥ng h·ª£p l·ªá" in error_msg or "invalid" in error_msg.lower():
                QMessageBox.warning(
                    self, "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", f"‚ùå {error_msg}\n\n"
                    "üí° Ki·ªÉm tra l·∫°i:\n"
                    "1. T√™n category kh√¥ng ƒë·ªÉ tr·ªëng\n"
                    "2. Slug ch·ªâ ch·ª©a ch·ªØ, s·ªë v√† d·∫•u g·∫°ch ngang\n"
                    "3. Parent category c√≥ t·ªìn t·∫°i kh√¥ng")
            else:
                QMessageBox.critical(self, "L·ªói",
                                     f"Kh√¥ng th·ªÉ t·∫°o danh m·ª•c:\n{error_msg}")
        finally:
            # Re-enable buttons v√† ·∫©n progress
            self.add_btn.setEnabled(True)
            self.progress_bar.setVisible(False)
            self.status_label.setText("S·∫µn s√†ng")

    def update_category_on_site(self, category_id: int, category_data: Dict,
                                wc_category_id: int):
        """C·∫≠p nh·∫≠t danh m·ª•c tr·ª±c ti·∫øp tr√™n site v√† ƒë·ªìng b·ªô v·ªÅ"""
        try:
            # Disable buttons
            self.edit_btn.setEnabled(False)
            self.progress_bar.setVisible(True)
            self.progress_bar.setValue(0)
            self.status_label.setText("ƒêang c·∫≠p nh·∫≠t danh m·ª•c tr√™n site...")

            # L·∫•y th√¥ng tin site
            site_id = category_data.get('site_id')
            site = self.db.get_site_by_id(site_id)
            if not site:
                QMessageBox.warning(self, "L·ªói",
                                    "Kh√¥ng t√¨m th·∫•y th√¥ng tin site")
                return

            # Kh·ªüi t·∫°o API
            from .woocommerce_api import WooCommerceAPI
            api = WooCommerceAPI(site)

            self.progress_bar.setValue(30)
            self.status_label.setText("Chu·∫©n b·ªã d·ªØ li·ªáu...")

            # Chu·∫©n b·ªã d·ªØ li·ªáu cho WooCommerce API
            wc_category_data = {
                'name':
                category_data['name'],
                'slug':
                category_data['slug'],
                'description':
                category_data.get('description', ''),
                'parent':
                category_data.get('parent_id', 0)
                if category_data.get('parent_id') else 0
            }

            # Th√™m image n·∫øu c√≥
            if category_data.get('image'):
                wc_category_data['image'] = {'src': category_data['image']}

            self.progress_bar.setValue(50)
            self.status_label.setText("C·∫≠p nh·∫≠t danh m·ª•c tr√™n site...")

            # C·∫≠p nh·∫≠t category tr√™n WooCommerce
            result = api.update_category(wc_category_id, wc_category_data)

            if result:
                self.progress_bar.setValue(70)
                self.status_label.setText("C·∫≠p nh·∫≠t database...")

                # C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ response
                category_data['count'] = result.get('count', 0)

                # C·∫≠p nh·∫≠t image URL t·ª´ response n·∫øu c√≥
                if result.get('image') and result['image'].get('src'):
                    category_data['image'] = result['image']['src']

                self.db.update_category(category_id, category_data)

                self.progress_bar.setValue(100)
                self.status_label.setText("Ho√†n th√†nh!")

                # Reload categories ƒë·ªÉ hi·ªÉn th·ªã
                self.load_categories()

                QMessageBox.information(
                    self, "Th√†nh c√¥ng",
                    f"ƒê√£ c·∫≠p nh·∫≠t danh m·ª•c '{category_data['name']}' th√†nh c√¥ng!\n"
                    f"WooCommerce ID: {result.get('id')}")
            else:
                raise Exception("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c response t·ª´ WooCommerce API")

        except Exception as e:
            self.logger.error(f"L·ªói c·∫≠p nh·∫≠t category tr√™n site: {str(e)}")
            QMessageBox.critical(
                self, "L·ªói",
                f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c tr√™n site:\n{str(e)}\n\n"
                "B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t trong database local kh√¥ng?")

            # H·ªèi c√≥ mu·ªën c·∫≠p nh·∫≠t local kh√¥ng
            reply = QMessageBox.question(
                self, "C·∫≠p nh·∫≠t database local?",
                "C·∫≠p nh·∫≠t tr√™n site th·∫•t b·∫°i. B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t danh m·ª•c trong database local kh√¥ng?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.Yes)

            if reply == QMessageBox.StandardButton.Yes:
                try:
                    self.db.update_category(category_id, category_data)
                    self.load_categories()
                    QMessageBox.information(
                        self, "Th√†nh c√¥ng",
                        "ƒê√£ c·∫≠p nh·∫≠t danh m·ª•c trong database local!")
                except Exception as local_error:
                    QMessageBox.critical(
                        self, "L·ªói",
                        f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t database local: {str(local_error)}"
                    )

        finally:
            # Restore UI
            self.edit_btn.setEnabled(True)
            self.progress_bar.setVisible(False)
            self.status_label.setText("S·∫µn s√†ng")

    def bulk_add_categories(self):
        """T·∫°o nhi·ªÅu danh m·ª•c theo c·∫•u tr√∫c c√¢y"""
        try:
            sites = self.db.get_active_sites()
            if not sites:
                QMessageBox.warning(self, "C·∫£nh b√°o",
                                    "Kh√¥ng c√≥ site n√†o ho·∫°t ƒë·ªông")
                return

            dialog = BulkCategoryDialog(self, sites=sites)
            if dialog.exec() == QDialog.DialogCode.Accepted:
                result_data = dialog.get_result_data()
                if result_data:
                    site_id, categories = result_data
                    self.create_bulk_categories(site_id, categories)

        except Exception as e:
            self.logger.error(f"L·ªói t·∫°o bulk categories: {str(e)}")
            QMessageBox.critical(
                self, "L·ªói", f"Kh√¥ng th·ªÉ t·∫°o danh m·ª•c h√†ng lo·∫°t:\n{str(e)}")

    def create_bulk_categories(self, site_id: int, categories: List[Dict]):
        """T·∫°o danh m·ª•c h√†ng lo·∫°t v·ªõi t·ªëi ∆∞u h√≥a duplicate detection"""
        try:
            # Disable buttons
            self.bulk_add_btn.setEnabled(False)
            self.add_btn.setEnabled(False)
            self.progress_bar.setVisible(True)
            self.progress_bar.setMaximum(len(categories))
            self.progress_bar.setValue(0)

            site = self.db.get_site_by_id(site_id)
            if not site:
                QMessageBox.warning(self, "L·ªói", "Kh√¥ng t√¨m th·∫•y th√¥ng tin site")
                return

            # Kh·ªüi t·∫°o API
            from .woocommerce_api import WooCommerceAPI
            api = WooCommerceAPI(site)

            # L·∫•y danh s√°ch categories hi·ªán c√≥ tr√™n site
            self.status_label.setText("ƒêang l·∫•y danh s√°ch categories hi·ªán c√≥...")
            existing_categories = api.get_categories()

            # T·∫°o lookup table cho categories hi·ªán c√≥ theo t√™n v√† slug
            existing_lookup = {}
            for cat in existing_categories:
                name = cat.get('name', '').lower().strip()
                slug = cat.get('slug', '').lower().strip()
                if name:
                    existing_lookup[name] = cat
                if slug and slug != name:
                    existing_lookup[slug] = cat

            self.logger.info(f"T√¨m th·∫•y {len(existing_categories)} categories hi·ªán c√≥ tr√™n site")

            created_categories = []
            updated_categories = []
            parent_mapping = {}  # Mapping local index -> WC category ID
            errors = []

            # T·∫°o t·ª´ng danh m·ª•c theo th·ª© t·ª±
            for index, category_data in enumerate(categories):
                try:
                    category_name = category_data['name']
                    category_slug = category_data['slug']

                    self.status_label.setText(f"ƒêang x·ª≠ l√Ω: {category_name}...")
                    self.progress_bar.setValue(index)
                    QApplication.processEvents()

                    # Ki·ªÉm tra xem category ƒë√£ t·ªìn t·∫°i ch∆∞a
                    existing_category = None
                    name_key = category_name.lower().strip()
                    slug_key = category_slug.lower().strip()

                    if name_key in existing_lookup:
                        existing_category = existing_lookup[name_key]
                        self.logger.info(f"T√¨m th·∫•y category '{category_name}' theo t√™n")
                    elif slug_key in existing_lookup:
                        existing_category = existing_lookup[slug_key]
                        self.logger.info(f"T√¨m th·∫•y category '{category_name}' theo slug")

                    if existing_category:
                        # Category ƒë√£ t·ªìn t·∫°i, s·ª≠ d·ª•ng l·∫°i
                        wc_category_id = existing_category.get('id')
                        parent_mapping[index] = wc_category_id

                        # C·∫≠p nh·∫≠t th√¥ng tin trong database local n·∫øu ch∆∞a c√≥
                        local_category = self.db.get_category_by_wc_id(site_id, wc_category_id)
                        if not local_category:
                            local_category_data = {
                                'site_id': site_id,
                                'wc_category_id': wc_category_id,
                                'name': existing_category.get('name', category_name),
                                'slug': existing_category.get('slug', category_slug),
                                'description': existing_category.get('description', ''),
                                'parent_id': existing_category.get('parent', 0) if existing_category.get('parent', 0) > 0 else None,
                                'count': existing_category.get('count', 0),
                                'image': existing_category.get('image', {}).get('src', '') if existing_category.get('image') else ''
                            }
                            self.db.create_category(local_category_data)

                        updated_categories.append(f"{category_name} (ƒë√£ t·ªìn t·∫°i - ID: {wc_category_id})")
                        self.logger.info(f"S·ª≠ d·ª•ng l·∫°i category '{category_name}' (WC ID: {wc_category_id})")
                        continue

                    # Category ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
                    wc_category_data = {
                        'name': category_name,
                        'slug': category_slug,
                        'description': category_data.get('description', ''),
                        'parent': 0  # M·∫∑c ƒë·ªãnh l√† root
                    }

                    # X·ª≠ l√Ω parent category n·∫øu c√≥
                    if category_data.get('parent_id') is not None:
                        parent_index = category_data['parent_id']
                        if parent_index in parent_mapping:
                            wc_category_data['parent'] = parent_mapping[parent_index]
                            self.logger.info(f"Set parent cho '{category_name}': {parent_mapping[parent_index]}")

                    # T·∫°o category m·ªõi tr√™n WooCommerce
                    self.logger.info(f"T·∫°o category m·ªõi: {category_name}")
                    created_category = api.create_category(wc_category_data)

                    if created_category:
                        wc_category_id = created_category.get('id')
                        parent_mapping[index] = wc_category_id

                        # L∆∞u v√†o database local
                        local_category_data = {
                            'site_id': site_id,
                            'wc_category_id': wc_category_id,
                            'name': category_name,
                            'slug': category_slug,
                            'description': category_data.get('description', ''),
                            'parent_id': wc_category_data['parent'] if wc_category_data['parent'] > 0 else None,
                            'count': created_category.get('count', 0),
                            'image': created_category.get('image', {}).get('src', '') if created_category.get('image') else ''
                        }

                        self.db.create_category(local_category_data)
                        created_categories.append(f"{category_name} (m·ªõi - ID: {wc_category_id})")

                        # C·∫≠p nh·∫≠t lookup table
                        existing_lookup[category_name.lower().strip()] = created_category
                        existing_lookup[category_slug.lower().strip()] = created_category

                        self.logger.info(f"ƒê√£ t·∫°o category m·ªõi: {category_name} (WC ID: {wc_category_id})")
                    else:
                        errors.append(f"Kh√¥ng th·ªÉ t·∫°o category '{category_name}' tr√™n site")

                except Exception as e:
                    error_msg = f"L·ªói x·ª≠ l√Ω '{category_data.get('name', 'Unknown')}': {str(e)}"
                    errors.append(error_msg)
                    self.logger.error(error_msg)

            # Ho√†n th√†nh
            self.progress_bar.setValue(len(categories))
            self.status_label.setText("Ho√†n th√†nh!")

            # Reload categories ƒë·ªÉ hi·ªÉn th·ªã c·∫≠p nh·∫≠t
            self.load_categories()

            # Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
            self.show_bulk_creation_results(created_categories, updated_categories, errors)

        except Exception as e:
            self.logger.error(f"L·ªói t·∫°o bulk categories: {str(e)}")
            QMessageBox.critical(
                self, "L·ªói nghi√™m tr·ªçng",
                f"Kh√¥ng th·ªÉ ho√†n th√†nh qu√° tr√¨nh t·∫°o danh m·ª•c:\n{str(e)}")
        finally:
            # Restore UI
            self.bulk_add_btn.setEnabled(True)
            self.add_btn.setEnabled(True)
            self.progress_bar.setVisible(False)
            self.status_label.setText("S·∫µn s√†ng")

    def show_bulk_creation_results(self, created_categories: List[str], updated_categories: List[str], errors: List[str]):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ t·∫°o bulk categories"""
        try:
            total_processed = len(created_categories) + len(updated_categories)

            message = f"üìä **K·∫æT QU·∫¢ T·∫†O DANH M·ª§C**\n\n"

            if created_categories:
                message += f"‚úÖ **ƒê√£ t·∫°o m·ªõi {len(created_categories)} danh m·ª•c:**\n"
                for cat in created_categories[:10]:  # Hi·ªÉn th·ªã t·ªëi ƒëa 10
                    message += f"  ‚Ä¢ {cat}\n"
                if len(created_categories) > 10:
                    message += f"  ... v√† {len(created_categories) - 10} danh m·ª•c kh√°c\n"
                message += "\n"

            if updated_categories:
                message += f"üîÑ **ƒê√£ s·ª≠ d·ª•ng l·∫°i {len(updated_categories)} danh m·ª•c c√≥ s·∫µn:**\n"
                for cat in updated_categories[:10]:  # Hi·ªÉn th·ªã t·ªëi ƒëa 10
                    message += f"  ‚Ä¢ {cat}\n"
                if len(updated_categories) > 10:
                    message += f"  ... v√† {len(updated_categories) - 10} danh m·ª•c kh√°c\n"
                message += "\n"

            if errors:
                message += f"‚ùå **C√≥ {len(errors)} l·ªói:**\n"
                for error in errors[:5]:  # Hi·ªÉn th·ªã t·ªëi ƒëa 5 l·ªói
                    message += f"  ‚Ä¢ {error}\n"
                if len(errors) > 5:
                    message += f"  ... v√† {len(errors) - 5} l·ªói kh√°c\n"

            if total_processed > 0:
                message += f"\nüìà **T·ªïng k·∫øt:** {total_processed}/{total_processed + len(errors)} danh m·ª•c ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng"

            # Ch·ªçn icon v√† title ph√π h·ª£p
            if errors and not total_processed:
                icon = QMessageBox.Icon.Critical
                title = "T·∫°o danh m·ª•c th·∫•t b·∫°i"
            elif errors and total_processed:
                icon = QMessageBox.Icon.Warning
                title = "T·∫°o danh m·ª•c ho√†n th√†nh (c√≥ l·ªói)"
            else:
                icon = QMessageBox.Icon.Information
                title = "T·∫°o danh m·ª•c th√†nh c√¥ng"

            msg_box = QMessageBox(self)
            msg_box.setIcon(icon)
            msg_box.setWindowTitle(title)
            msg_box.setText(message)
            msg_box.exec()

        except Exception as e:
            self.logger.error(f"L·ªói hi·ªÉn th·ªã k·∫øt qu·∫£: {str(e)}")
            QMessageBox.information(
                self, "Ho√†n th√†nh", 
                f"ƒê√£ x·ª≠ l√Ω {len(created_categories)} danh m·ª•c m·ªõi v√† {len(updated_categories)} danh m·ª•c c√≥ s·∫µn")

    def add_category(self):
        """Th√™m danh m·ª•c m·ªõi"""
        try:
            sites = self.db.get_active_sites()
            if not sites:
                QMessageBox.warning(self, "C·∫£nh b√°o",
                                    "Kh√¥ng c√≥ site n√†o ho·∫°t ƒë·ªông")
                return

            categories = self.db.get_all_categories()

            dialog = CategoryDialog(self, sites=sites, categories=categories)
            if dialog.exec() == QDialog.DialogCode.Accepted:
                category_data = dialog.get_category_data()

                # Hi·ªÉn th·ªã dialog x√°c nh·∫≠n
                reply = QMessageBox.question(
                    self, "X√°c nh·∫≠n t·∫°o danh m·ª•c",
                    f"B·∫°n c√≥ mu·ªën t·∫°o danh m·ª•c '{category_data['name']}' tr·ª±c ti·∫øp l√™n site kh√¥ng?\n\n"
                    "Ch·ªçn 'Yes' ƒë·ªÉ t·∫°o l√™n site v√† ƒë·ªìng b·ªô v·ªÅ\n"
                    "Ch·ªçn 'No' ƒë·ªÉ ch·ªâ t·∫°o trong database local",
                    QMessageBox.StandardButton.Yes
                    | QMessageBox.StandardButton.No
                    | QMessageBox.StandardButton.Cancel,
                    QMessageBox.StandardButton.Yes)

                if reply == QMessageBox.StandardButton.Cancel:
                    return
                elif reply == QMessageBox.StandardButton.Yes:
                    # T·∫°o tr√™n site v√† ƒë·ªìng b·ªô v·ªÅ
                    self.create_category_on_site(category_data)
                else:
                    # Ch·ªâ t·∫°o trong database local
                    self.db.create_category(category_data)
                    self.load_categories()
                    QMessageBox.information(
                        self, "Th√†nh c√¥ng",
                        "ƒê√£ th√™m danh m·ª•c v√†o database local!")

        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"L·ªói t·∫°o category: {error_msg}")

            # Ki·ªÉm tra lo·∫°i l·ªói ƒë·ªÉ ƒë∆∞a ra th√¥ng b√°o ph√π h·ª£p
            if "Consumer Key kh√¥ng c√≥ quy·ªÅn" in error_msg or "insufficient_permission" in error_msg or "403" in error_msg:
                QMessageBox.warning(
                    self, "L·ªói quy·ªÅn h·∫°n", f"‚ùå {error_msg}\n\n"
                    "üí° Gi·∫£i ph√°p:\n"
                    "1. V√†o WooCommerce Admin ‚Üí WooCommerce ‚Üí Settings ‚Üí Advanced ‚Üí REST API\n"
                    "2. Ch·ªânh s·ª≠a Consumer Key hi·ªán t·∫°i\n"
                    "3. ƒê·∫£m b·∫£o Permissions = 'Read/Write'\n"
                    "4. Ho·∫∑c t·∫°o Consumer Key m·ªõi v·ªõi quy·ªÅn Read/Write\n\n"
                    "üîß L∆∞u √Ω: Consumer Key ch·ªâ c√≥ quy·ªÅn 'Read' kh√¥ng th·ªÉ t·∫°o/s·ª≠a d·ªØ li·ªáu"
                )
            elif "401" in error_msg or "x√°c th·ª±c" in error_msg:
                QMessageBox.warning(
                    self, "L·ªói x√°c th·ª±c", f"‚ùå {error_msg}\n\n"
                    "üí° Ki·ªÉm tra l·∫°i:\n"
                    "1. Consumer Key v√† Consumer Secret c√≥ ƒë√∫ng kh√¥ng\n"
                    "2. URL site c√≥ ch√≠nh x√°c kh√¥ng\n"
                    "3. WooCommerce REST API c√≥ ƒë∆∞·ª£c k√≠ch ho·∫°t kh√¥ng")
            else:
                QMessageBox.critical(self, "L·ªói",
                                     f"Kh√¥ng th·ªÉ t·∫°o danh m·ª•c:\n{error_msg}")
        finally:
            # Re-enable buttons v√† ·∫©n progress
            self.add_btn.setEnabled(True)
            self.progress_bar.setVisible(False)
            self.status_label.setText("S·∫µn s√†ng")

    def edit_category(self):
        """S·ª≠a danh m·ª•c ƒë√£ ch·ªçn"""
        selected_rows = self.table.selectionModel().selectedRows()
        if not selected_rows:
            return

        row = selected_rows[0].row()
        item = self.table.item(row, 0)
        if not item:
            return

        category_data = item.data(Qt.ItemDataRole.UserRole)
        if not category_data:
            return

        try:
            sites = self.db.get_active_sites()
            categories = self.db.get_all_categories()
            category_id = category_data.get('id')

            dialog = CategoryDialog(self,
                                    sites=sites,
                                    category=category_data,
                                    categories=categories)
            if dialog.exec() == QDialog.DialogCode.Accepted:
                updated_data = dialog.get_category_data()

                # Ki·ªÉm tra xem category c√≥ WC ID kh√¥ng
                wc_category_id = category_data.get('wc_category_id')

                if wc_category_id:
                    # Hi·ªÉn th·ªã dialog x√°c nh·∫≠n
                    reply = QMessageBox.question(
                        self, "X√°c nh·∫≠n c·∫≠p nh·∫≠t danh m·ª•c",
                        f"Danh m·ª•c n√†y ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô v·ªõi WooCommerce (ID: {wc_category_id}).\n\n"
                        "B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t tr√™n site kh√¥ng?\n\n"
                        "Ch·ªçn 'Yes' ƒë·ªÉ c·∫≠p nh·∫≠t tr√™n site v√† ƒë·ªìng b·ªô v·ªÅ\n"
                        "Ch·ªçn 'No' ƒë·ªÉ ch·ªâ c·∫≠p nh·∫≠t trong database local",
                        QMessageBox.StandardButton.Yes
                        | QMessageBox.StandardButton.No
                        | QMessageBox.StandardButton.Cancel,
                        QMessageBox.StandardButton.Yes)

                    if reply == QMessageBox.StandardButton.Cancel:
                        return
                    elif reply == QMessageBox.StandardButton.Yes:
                        # C·∫≠p nh·∫≠t tr√™n site
                        self.update_category_on_site(category_id, updated_data,
                                                     wc_category_id)
                        return

                # Ch·ªâ c·∫≠p nh·∫≠t trong database local
                self.db.update_category(category_id, updated_data)
                self.load_categories()
                QMessageBox.information(
                    self, "Th√†nh c√¥ng",
                    "ƒê√£ c·∫≠p nh·∫≠t danh m·ª•c trong database local!")

        except Exception as e:
            self.logger.error(f"L·ªói s·ª≠a category: {str(e)}")
            QMessageBox.critical(self, "L·ªói",
                                 f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c: {str(e)}")

    def delete_multiple_categories(self, categories_to_delete: list):
        """X√≥a nhi·ªÅu categories c√πng l√∫c"""
        total_categories = len(categories_to_delete)

        # T·∫°o progress dialog
        progress = QProgressDialog("ƒêang x√≥a categories...", "H·ªßy", 0,
                                   total_categories, self)
        progress.setWindowModality(Qt.WindowModality.WindowModal)
        progress.setAutoReset(False)
        progress.setAutoClose(False)

        successful_deletions = []
        failed_deletions = []

        for i, category_info in enumerate(categories_to_delete):
            if progress.wasCanceled():
                break

            progress.setValue(i)
            progress.setLabelText(f"ƒêang x√≥a '{category_info['name']}'...")
            QApplication.processEvents()

            try:
                success = self.delete_single_category(category_info['id'],
                                                      category_info['wc_id'],
                                                      category_info['name'],
                                                      show_dialogs=False)

                if success:
                    successful_deletions.append(category_info['name'])
                else:
                    failed_deletions.append(category_info['name'])

            except Exception as e:
                self.logger.error(
                    f"L·ªói x√≥a category {category_info['name']}: {str(e)}")
                failed_deletions.append(category_info['name'])

        progress.setValue(total_categories)
        progress.close()

        # Reload categories
        self.load_categories()

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        self.show_deletion_results(successful_deletions, failed_deletions)

    def delete_single_category(self,
                               category_id: int,
                               wc_category_id: int,
                               category_name: str,
                               show_dialogs: bool = True) -> bool:
        """X√≥a m·ªôt category ƒë∆°n l·∫ª"""
        try:
            # L·∫•y site info
            category = self.db.get_category_by_id(category_id)
            if not category:
                return False

            # category l√† dict, n√™n s·ª≠ d·ª•ng ['site_id'] thay v√¨ .site_id
            site_id = category.get('site_id')
            if not site_id:
                if show_dialogs:
                    QMessageBox.warning(
                        self, "C·∫£nh b√°o",
                        "Kh√¥ng t√¨m th·∫•y site_id cho category n√†y")
                return False

            site = self.db.get_site_by_id(site_id)
            if not site:
                if show_dialogs:
                    QMessageBox.warning(self, "C·∫£nh b√°o",
                                        "Kh√¥ng t√¨m th·∫•y th√¥ng tin site")
                return False

            # Kh·ªüi t·∫°o API
            api = WooCommerceAPI(site)

            # X√≥a t·ª´ WooCommerce
            success = api.delete_category(wc_category_id, force=True)

            if success:
                # X√≥a t·ª´ database local
                self.db.delete_category(category_id)
                return True
            else:
                # N·∫øu kh√¥ng hi·ªÉn th·ªã dialog, ch·ªâ x√≥a local
                if not show_dialogs:
                    self.db.delete_category(category_id)
                    return True
                else:
                    return self.handle_delete_failure(category_id,
                                                      wc_category_id,
                                                      category_name)

        except Exception as e:
            self.logger.error(f"L·ªói x√≥a category t·ª´ site: {str(e)}")
            if show_dialogs:
                QMessageBox.critical(self, "L·ªói",
                                     f"L·ªói x√≥a category: {str(e)}")
            return False

    def delete_category(self):
        """X√≥a danh m·ª•c ƒë√£ ch·ªçn"""
        selected_rows = self.table.selectionModel().selectedRows()
        if not selected_rows:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn danh m·ª•c c·∫ßn x√≥a")
            return

        # L·∫•y th√¥ng tin category ƒë∆∞·ª£c ch·ªçn
        row = selected_rows[0].row()
        item = self.table.item(row, 0)
        if not item:
            return

        category_data = item.data(Qt.ItemDataRole.UserRole)
        if not category_data:
            return

        category_id = category_data.get('id')
        category_name = category_data.get('name', '')
        wc_category_id = category_data.get('wc_category_id')

        try:
            # X√°c nh·∫≠n x√≥a
            reply = QMessageBox.question(
                self, "X√°c nh·∫≠n x√≥a", 
                f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a danh m·ª•c '{category_name}' kh√¥ng?\n\n"
                "H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No
            )

            if reply == QMessageBox.StandardButton.No:
                return

            # Ki·ªÉm tra xem c√≥ WC ID kh√¥ng
            if wc_category_id:
                # Hi·ªÉn th·ªã t√πy ch·ªçn x√≥a
                choice_reply = QMessageBox.question(
                    self, "T√πy ch·ªçn x√≥a",
                    f"Danh m·ª•c n√†y ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô v·ªõi WooCommerce (ID: {wc_category_id}).\n\n"
                    "B·∫°n mu·ªën x√≥a t·ª´ ƒë√¢u?\n\n"
                    "Yes: X√≥a c·∫£ tr√™n site v√† database local\n"
                    "No: Ch·ªâ x√≥a trong database local",
                    QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No | QMessageBox.StandardButton.Cancel,
                    QMessageBox.StandardButton.Yes
                )

                if choice_reply == QMessageBox.StandardButton.Cancel:
                    return
                elif choice_reply == QMessageBox.StandardButton.Yes:
                    # X√≥a c·∫£ tr√™n site v√† local
                    success = self.delete_single_category(category_id, wc_category_id, category_name, show_dialogs=True)
                    if success:
                        QMessageBox.information(self, "Th√†nh c√¥ng", 
                                              f"ƒê√£ x√≥a danh m·ª•c '{category_name}' t·ª´ c·∫£ site v√† database local!")
                else:
                    # Ch·ªâ x√≥a local
                    self.db.delete_category(category_id)
                    QMessageBox.information(self, "Th√†nh c√¥ng", 
                                          f"ƒê√£ x√≥a danh m·ª•c '{category_name}' kh·ªèi database local!")
            else:
                # Ch·ªâ c√≥ trong local, x√≥a tr·ª±c ti·∫øp
                self.db.delete_category(category_id)
                QMessageBox.information(self, "Th√†nh c√¥ng", 
                                      f"ƒê√£ x√≥a danh m·ª•c '{category_name}'!")

            # Reload categories ƒë·ªÉ c·∫≠p nh·∫≠t hi·ªÉn th·ªã
            self.load_categories()

        except Exception as e:
            self.logger.error(f"L·ªói x√≥a category: {str(e)}")
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a danh m·ª•c:\n{str(e)}")

    def handle_delete_failure(self, category_id: int, wc_category_id: int,
                              category_name: str) -> bool:
        """X·ª≠ l√Ω khi x√≥a th·∫•t b·∫°i"""
        msg_box = QMessageBox(self)
        msg_box.setIcon(QMessageBox.Icon.Question)
        msg_box.setWindowTitle("L·ªói x√≥a t·ª´ site")
        msg_box.setText(
            f"Kh√¥ng th·ªÉ x√≥a category '{category_name}' t·ª´ site.\n\nB·∫°n mu·ªën:")

        only_local_btn = msg_box.addButton("Ch·ªâ x√≥a local", QMessageBox.ButtonRole.AcceptRole)
        cancel_btn = msg_box.addButton("H·ªßy", QMessageBox.ButtonRole.RejectRole)
        
        msg_box.exec()
        
        if msg_box.clickedButton() == only_local_btn:
            try:
                self.db.delete_category(category_id)
                return True
            except Exception as e:
                self.logger.error(f"L·ªói x√≥a category local: {str(e)}")
                QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a category kh·ªèi database local: {str(e)}")
                return False
        
        return False

    def show_deletion_results(self, successful_deletions: List[str], failed_deletions: List[str]):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ x√≥a categories"""
        try:
            message = "üìä **K·∫æT QU·∫¢ X√ìA DANH M·ª§C**\n\n"
            
            if successful_deletions:
                message += f"‚úÖ **ƒê√£ x√≥a th√†nh c√¥ng {len(successful_deletions)} danh m·ª•c:**\n"
                for name in successful_deletions[:10]:  # Hi·ªÉn th·ªã t·ªëi ƒëa 10
                    message += f"  ‚Ä¢ {name}\n"
                if len(successful_deletions) > 10:
                    message += f"  ... v√† {len(successful_deletions) - 10} danh m·ª•c kh√°c\n"
                message += "\n"
            
            if failed_deletions:
                message += f"‚ùå **Kh√¥ng th·ªÉ x√≥a {len(failed_deletions)} danh m·ª•c:**\n"
                for name in failed_deletions[:10]:  # Hi·ªÉn th·ªã t·ªëi ƒëa 10
                    message += f"  ‚Ä¢ {name}\n"
                if len(failed_deletions) > 10:
                    message += f"  ... v√† {len(failed_deletions) - 10} danh m·ª•c kh√°c\n"
            
            # Ch·ªçn icon ph√π h·ª£p
            if failed_deletions and not successful_deletions:
                icon = QMessageBox.Icon.Critical
                title = "X√≥a danh m·ª•c th·∫•t b·∫°i"
            elif failed_deletions and successful_deletions:
                icon = QMessageBox.Icon.Warning
                title = "X√≥a danh m·ª•c ho√†n th√†nh (c√≥ l·ªói)"
            else:
                icon = QMessageBox.Icon.Information
                title = "X√≥a danh m·ª•c th√†nh c√¥ng"
            
            msg_box = QMessageBox(self)
            msg_box.setIcon(icon)
            msg_box.setWindowTitle(title)
            msg_box.setText(message)
            msg_box.exec()
            
        except Exception as e:
            self.logger.error(f"L·ªói hi·ªÉn th·ªã k·∫øt qu·∫£ x√≥a: {str(e)}")
            QMessageBox.information(
                self, "Ho√†n th√†nh",
                f"ƒê√£ x√≥a {len(successful_deletions)} danh m·ª•c th√†nh c√¥ng, {len(failed_deletions)} th·∫•t b·∫°i"
            )

    def on_item_changed(self, item):
        """X·ª≠ l√Ω khi item trong table ƒë∆∞·ª£c ch·ªânh s·ª≠a tr·ª±c ti·∫øp"""
        if self.is_initializing:
            return
            
        try:
            row = item.row()
            column = item.column()
            
            # L·∫•y category data t·ª´ item ƒë·∫ßu ti√™n c·ªßa row
            first_item = self.table.item(row, 0)
            if not first_item:
                return
                
            category_data = first_item.data(Qt.ItemDataRole.UserRole)
            if not category_data:
                return
                
            category_id = category_data.get('id')
            wc_category_id = category_data.get('wc_category_id')
            
            if not wc_category_id:
                QMessageBox.warning(
                    self, "C·∫£nh b√°o", 
                    "Danh m·ª•c n√†y ch∆∞a ƒë∆∞·ª£c ƒë·ªìng b·ªô v·ªõi WooCommerce.\n"
                    "Kh√¥ng th·ªÉ ch·ªânh s·ª≠a tr·ª±c ti·∫øp."
                )
                # Restore original value
                self.load_categories()
                return
            
            # L·∫•y gi√° tr·ªã m·ªõi
            new_value = item.text()
            
            # C·∫≠p nh·∫≠t d·ª±a tr√™n c·ªôt ƒë∆∞·ª£c ch·ªânh s·ª≠a
            update_data = category_data.copy()
            
            if column == 2:  # T√™n danh m·ª•c
                # Lo·∫°i b·ªè tree prefix v√† icon
                clean_name = new_value
                for prefix in ["üìÅ ", "üìÇ ", "üìÑ ", "‚îú‚îÄ‚îÄ ", "‚îî‚îÄ‚îÄ "]:
                    clean_name = clean_name.replace(prefix, "")
                clean_name = clean_name.strip()
                
                update_data['name'] = clean_name
                
            elif column == 3:  # Slug
                update_data['slug'] = new_value
                
            elif column == 4:  # Description
                update_data['description'] = new_value
                
            else:
                # C·ªôt kh√¥ng cho ph√©p ch·ªânh s·ª≠a
                self.load_categories()
                return
            
            # X√°c nh·∫≠n c·∫≠p nh·∫≠t
            reply = QMessageBox.question(
                self, "X√°c nh·∫≠n c·∫≠p nh·∫≠t",
                f"B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t danh m·ª•c '{category_data.get('name')}' l√™n site kh√¥ng?\n\n"
                "Yes: C·∫≠p nh·∫≠t l√™n WooCommerce v√† database local\n"
                "No: Ch·ªâ c·∫≠p nh·∫≠t database local\n"
                "Cancel: H·ªßy thay ƒë·ªïi",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No | QMessageBox.StandardButton.Cancel,
                QMessageBox.StandardButton.Yes
            )
            
            if reply == QMessageBox.StandardButton.Cancel:
                # Restore original value
                self.load_categories()
                return
            elif reply == QMessageBox.StandardButton.Yes:
                # C·∫≠p nh·∫≠t l√™n site
                self.update_category_on_site(category_id, update_data, wc_category_id)
            else:
                # Ch·ªâ c·∫≠p nh·∫≠t local
                self.db.update_category(category_id, update_data)
                QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t danh m·ª•c trong database local!")
                self.load_categories()
                
        except Exception as e:
            self.logger.error(f"L·ªói c·∫≠p nh·∫≠t item: {str(e)}")
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t: {str(e)}")
            # Restore original value
            self.load_categories()

    def debug_category_mapping(self):
        """Debug mapping gi·ªØa local categories v√† WooCommerce categories"""
        try:
            site_id = self.site_combo.currentData()
            if not site_id:
                QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt site ƒë·ªÉ debug")
                return
                
            site = self.db.get_site_by_id(site_id)
            if not site:
                QMessageBox.warning(self, "C·∫£nh b√°o", "Kh√¥ng t√¨m th·∫•y th√¥ng tin site")
                return
            
            # L·∫•y categories t·ª´ database local
            local_categories = self.db.get_categories_by_site(site_id)
            
            # L·∫•y categories t·ª´ WooCommerce
            from .woocommerce_api import WooCommerceAPI
            api = WooCommerceAPI(site)
            wc_categories = api.get_categories()
            
            # T·∫°o debug dialog
            debug_dialog = QDialog(self)
            debug_dialog.setWindowTitle(f"Debug Category Mapping - {site.name}")
            debug_dialog.resize(800, 600)
            
            layout = QVBoxLayout(debug_dialog)
            
            # Tab widget
            tab_widget = QTabWidget()
            
            # Tab 1: Local categories
            local_tab = QWidget()
            local_layout = QVBoxLayout(local_tab)
            local_layout.addWidget(QLabel(f"Local Categories ({len(local_categories)})"))
            
            local_table = QTableWidget()
            local_table.setColumnCount(4)
            local_table.setHorizontalHeaderLabels(["Local ID", "Name", "WC ID", "Status"])
            local_table.setRowCount(len(local_categories))
            
            for row, cat in enumerate(local_categories):
                local_table.setItem(row, 0, QTableWidgetItem(str(cat.get('id', ''))))
                local_table.setItem(row, 1, QTableWidgetItem(str(cat.get('name', ''))))
                local_table.setItem(row, 2, QTableWidgetItem(str(cat.get('wc_category_id', ''))))
                status = "Synced" if cat.get('wc_category_id') else "Local only"
                local_table.setItem(row, 3, QTableWidgetItem(status))
            
            local_layout.addWidget(local_table)
            tab_widget.addTab(local_tab, "Local Categories")
            
            # Tab 2: WooCommerce categories
            wc_tab = QWidget()
            wc_layout = QVBoxLayout(wc_tab)
            wc_layout.addWidget(QLabel(f"WooCommerce Categories ({len(wc_categories)})"))
            
            wc_table = QTableWidget()
            wc_table.setColumnCount(4)
            wc_table.setHorizontalHeaderLabels(["WC ID", "Name", "Slug", "Parent"])
            wc_table.setRowCount(len(wc_categories))
            
            for row, cat in enumerate(wc_categories):
                wc_table.setItem(row, 0, QTableWidgetItem(str(cat.get('id', ''))))
                wc_table.setItem(row, 1, QTableWidgetItem(str(cat.get('name', ''))))
                wc_table.setItem(row, 2, QTableWidgetItem(str(cat.get('slug', ''))))
                wc_table.setItem(row, 3, QTableWidgetItem(str(cat.get('parent', ''))))
            
            wc_layout.addWidget(wc_table)
            tab_widget.addTab(wc_tab, "WooCommerce Categories")
            
            # Tab 3: Mapping analysis
            analysis_tab = QWidget()
            analysis_layout = QVBoxLayout(analysis_tab)
            
            analysis_text = QTextEdit()
            analysis_text.setReadOnly(True)
            
            # Ph√¢n t√≠ch mapping
            analysis = "üìä CATEGORY MAPPING ANALYSIS\n\n"
            
            local_wc_ids = set(cat.get('wc_category_id') for cat in local_categories if cat.get('wc_category_id'))
            wc_ids = set(cat.get('id') for cat in wc_categories)
            
            analysis += f"Local categories: {len(local_categories)}\n"
            analysis += f"WooCommerce categories: {len(wc_categories)}\n"
            analysis += f"Synced categories: {len(local_wc_ids)}\n\n"
            
            # Categories ch·ªâ c√≥ local
            local_only = [cat for cat in local_categories if not cat.get('wc_category_id')]
            if local_only:
                analysis += f"üî∏ LOCAL ONLY ({len(local_only)}):\n"
                for cat in local_only[:10]:
                    analysis += f"  ‚Ä¢ {cat.get('name', 'N/A')} (ID: {cat.get('id')})\n"
                if len(local_only) > 10:
                    analysis += f"  ... v√† {len(local_only) - 10} categories kh√°c\n"
                analysis += "\n"
            
            # Categories ch·ªâ c√≥ tr√™n WooCommerce
            wc_only_ids = wc_ids - local_wc_ids
            if wc_only_ids:
                analysis += f"üî∏ WOOCOMMERCE ONLY ({len(wc_only_ids)}):\n"
                wc_only_cats = [cat for cat in wc_categories if cat.get('id') in wc_only_ids]
                for cat in wc_only_cats[:10]:
                    analysis += f"  ‚Ä¢ {cat.get('name', 'N/A')} (WC ID: {cat.get('id')})\n"
                if len(wc_only_cats) > 10:
                    analysis += f"  ... v√† {len(wc_only_cats) - 10} categories kh√°c\n"
                analysis += "\n"
            
            # Orphaned categories (c√≥ parent_id nh∆∞ng parent kh√¥ng t·ªìn t·∫°i)
            all_local_ids = set(cat.get('id') for cat in local_categories)
            orphaned = []
            for cat in local_categories:
                parent_id = cat.get('parent_id')
                if parent_id and parent_id not in all_local_ids:
                    orphaned.append(cat)
            
            if orphaned:
                analysis += f"üî∏ ORPHANED CATEGORIES ({len(orphaned)}):\n"
                for cat in orphaned[:10]:
                    analysis += f"  ‚Ä¢ {cat.get('name', 'N/A')} (Parent ID: {cat.get('parent_id')})\n"
                if len(orphaned) > 10:
                    analysis += f"  ... v√† {len(orphaned) - 10} categories kh√°c\n"
                analysis += "\n"
            
            analysis_text.setPlainText(analysis)
            analysis_layout.addWidget(analysis_text)
            tab_widget.addTab(analysis_tab, "Analysis")
            
            layout.addWidget(tab_widget)
            
            # Buttons
            button_layout = QHBoxLayout()
            
            sync_missing_btn = QPushButton("Sync Missing from WC")
            sync_missing_btn.clicked.connect(lambda: self.sync_missing_categories(site_id, wc_only_ids, wc_categories))
            button_layout.addWidget(sync_missing_btn)
            
            close_btn = QPushButton("Close")
            close_btn.clicked.connect(debug_dialog.accept)
            button_layout.addWidget(close_btn)
            
            layout.addLayout(button_layout)
            
            debug_dialog.exec()
            
        except Exception as e:
            self.logger.error(f"L·ªói debug category mapping: {str(e)}")
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ th·ª±c hi·ªán debug: {str(e)}")

    def sync_missing_categories(self, site_id: int, missing_wc_ids: set, wc_categories: list):
        """Sync c√°c categories thi·∫øu t·ª´ WooCommerce v·ªÅ local"""
        try:
            if not missing_wc_ids:
                QMessageBox.information(self, "Th√¥ng b√°o", "Kh√¥ng c√≥ categories n√†o c·∫ßn sync")
                return
            
            reply = QMessageBox.question(
                self, "X√°c nh·∫≠n sync",
                f"B·∫°n c√≥ mu·ªën sync {len(missing_wc_ids)} categories t·ª´ WooCommerce v·ªÅ database local kh√¥ng?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.Yes
            )
            
            if reply == QMessageBox.StandardButton.No:
                return
            
            missing_categories = [cat for cat in wc_categories if cat.get('id') in missing_wc_ids]
            
            # Progress dialog
            progress = QProgressDialog("ƒêang sync categories...", "H·ªßy", 0, len(missing_categories), self)
            progress.setWindowModality(Qt.WindowModality.WindowModal)
            
            synced_count = 0
            for i, wc_cat in enumerate(missing_categories):
                if progress.wasCanceled():
                    break
                
                progress.setValue(i)
                progress.setLabelText(f"Sync '{wc_cat.get('name', 'N/A')}'...")
                QApplication.processEvents()
                
                try:
                    # T·∫°o category data cho local database
                    category_data = {
                        'site_id': site_id,
                        'wc_category_id': wc_cat.get('id'),
                        'name': wc_cat.get('name', ''),
                        'slug': wc_cat.get('slug', ''),
                        'description': wc_cat.get('description', ''),
                        'parent_id': wc_cat.get('parent', 0) if wc_cat.get('parent', 0) > 0 else None,
                        'count': wc_cat.get('count', 0),
                        'image': wc_cat.get('image', {}).get('src', '') if wc_cat.get('image') else ''
                    }
                    
                    self.db.create_category(category_data)
                    synced_count += 1
                    
                except Exception as e:
                    self.logger.error(f"L·ªói sync category {wc_cat.get('name')}: {str(e)}")
            
            progress.setValue(len(missing_categories))
            progress.close()
            
            # Reload categories
            self.load_categories()
            
            QMessageBox.information(
                self, "Ho√†n th√†nh", 
                f"ƒê√£ sync {synced_count}/{len(missing_categories)} categories th√†nh c√¥ng!"
            )
            
        except Exception as e:
            self.logger.error(f"L·ªói sync missing categories: {str(e)}")
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ sync categories: {str(e)}")("Ch·ªâ x√≥a local", QMessageBox.ButtonRole.AcceptRole)
        cancel_btn = msg_box.addButton("H·ªßy", QMessageBox.ButtonRole.RejectRole)
        
        msg_box.exec()
        
        if msg_box.clickedButton() == only_local_btn:
            try:
                self.db.delete_category(category_id)
                return True
            except Exception as e:
                self.logger.error(f"L·ªói x√≥a category local: {str(e)}")
                QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a category t·ª´ database: {str(e)}")
                return False
        
        return False

    def show_deletion_results(self, successful_deletions: List[str], failed_deletions: List[str]):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ x√≥a"""
        try:
            message = f"üìä **K·∫æT QU·∫¢ X√ìA DANH M·ª§C**\n\n"
            
            if successful_deletions:
                message += f"‚úÖ **ƒê√£ x√≥a th√†nh c√¥ng {len(successful_deletions)} danh m·ª•c:**\n"
                for cat in successful_deletions[:10]:
                    message += f"  ‚Ä¢ {cat}\n"
                if len(successful_deletions) > 10:
                    message += f"  ... v√† {len(successful_deletions) - 10} danh m·ª•c kh√°c\n"
                message += "\n"
            
            if failed_deletions:
                message += f"‚ùå **Kh√¥ng th·ªÉ x√≥a {len(failed_deletions)} danh m·ª•c:**\n"
                for cat in failed_deletions[:10]:
                    message += f"  ‚Ä¢ {cat}\n"
                if len(failed_deletions) > 10:
                    message += f"  ... v√† {len(failed_deletions) - 10} danh m·ª•c kh√°c\n"
            
            icon = QMessageBox.Icon.Information if not failed_deletions else QMessageBox.Icon.Warning
            title = "X√≥a danh m·ª•c ho√†n th√†nh"
            
            QMessageBox.information(self, title, message)
            
        except Exception as e:
            self.logger.error(f"L·ªói hi·ªÉn th·ªã k·∫øt qu·∫£ x√≥a: {str(e)}")

    def delete_category(self):
        """X√≥a danh m·ª•c ƒë√£ ch·ªçn"""
        selected_rows = self.table.selectionModel().selectedRows()
        if not selected_rows:
            return

        # Ki·ªÉm tra xem c√≥ nhi·ªÅu rows ƒë∆∞·ª£c ch·ªçn kh√¥ng
        if len(selected_rows) > 1:
            # X√≥a nhi·ªÅu categories
            categories_to_delete = []
            
            for selected_row in selected_rows:
                row = selected_row.row()
                item = self.table.item(row, 0)
                if item:
                    category_data = item.data(Qt.ItemDataRole.UserRole)
                    if category_data:
                        categories_to_delete.append({
                            'id': category_data.get('id'),
                            'wc_id': category_data.get('wc_category_id'),
                            'name': category_data.get('name', 'Kh√¥ng r√µ')
                        })
            
            if not categories_to_delete:
                return
            
            # X√°c nh·∫≠n x√≥a nhi·ªÅu
            reply = QMessageBox.question(
                self, "X√°c nh·∫≠n x√≥a nhi·ªÅu danh m·ª•c",
                f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a {len(categories_to_delete)} danh m·ª•c ƒë√£ ch·ªçn?\n\n"
                "L∆∞u √Ω: Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c!",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                self.delete_multiple_categories(categories_to_delete)
            
            return

        # X√≥a m·ªôt category
        row = selected_rows[0].row()
        item = self.table.item(row, 0)
        if not item:
            return

        category_data = item.data(Qt.ItemDataRole.UserRole)
        if not category_data:
            return

        category_name = category_data.get('name', 'Kh√¥ng r√µ')
        category_id = category_data.get('id')
        wc_category_id = category_data.get('wc_category_id')

        # X√°c nh·∫≠n x√≥a
        reply = QMessageBox.question(
            self, "X√°c nh·∫≠n x√≥a",
            f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a danh m·ª•c '{category_name}'?\n\n"
            "L∆∞u √Ω: Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c!",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            try:
                if wc_category_id:
                    # Category ƒë√£ ƒë·ªìng b·ªô, h·ªèi c√≥ mu·ªën x√≥a t·ª´ site kh√¥ng
                    site_reply = QMessageBox.question(
                        self, "X√≥a t·ª´ WooCommerce?",
                        f"Danh m·ª•c '{category_name}' ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô v·ªõi WooCommerce.\n\n"
                        "B·∫°n c√≥ mu·ªën x√≥a t·ª´ site kh√¥ng?\n\n"
                        "Ch·ªçn 'Yes' ƒë·ªÉ x√≥a t·ª´ site v√† database local\n"
                        "Ch·ªçn 'No' ƒë·ªÉ ch·ªâ x√≥a t·ª´ database local",
                        QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No | QMessageBox.StandardButton.Cancel,
                        QMessageBox.StandardButton.Yes
                    )
                    
                    if site_reply == QMessageBox.StandardButton.Cancel:
                        return
                    elif site_reply == QMessageBox.StandardButton.Yes:
                        # X√≥a t·ª´ site v√† local
                        success = self.delete_single_category(category_id, wc_category_id, category_name, show_dialogs=True)
                        if success:
                            self.load_categories()
                            QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ x√≥a danh m·ª•c '{category_name}' th√†nh c√¥ng!")
                    else:
                        # Ch·ªâ x√≥a local
                        self.db.delete_category(category_id)
                        self.load_categories()
                        QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ x√≥a danh m·ª•c '{category_name}' kh·ªèi database local!")
                else:
                    # Category ch∆∞a ƒë·ªìng b·ªô, ch·ªâ x√≥a local
                    self.db.delete_category(category_id)
                    self.load_categories()
                    QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ x√≥a danh m·ª•c '{category_name}' th√†nh c√¥ng!")

            except Exception as e:
                self.logger.error(f"L·ªói x√≥a category: {str(e)}")
                QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ x√≥a danh m·ª•c: {str(e)}")

    def on_item_changed(self, item):
        """X·ª≠ l√Ω khi item trong table ƒë∆∞·ª£c thay ƒë·ªïi (inline editing)"""
        if self.is_initializing:
            return
            
        try:
            row = item.row()
            column = item.column()
            
            # L·∫•y category data t·ª´ row ƒë·∫ßu ti√™n
            category_item = self.table.item(row, 0)
            if not category_item:
                return
                
            category_data = category_item.data(Qt.ItemDataRole.UserRole)
            if not category_data:
                return
            
            category_id = category_data.get('id')
            wc_category_id = category_data.get('wc_category_id')
            
            if not wc_category_id:
                QMessageBox.warning(self, "C·∫£nh b√°o", 
                                  "Category ch∆∞a ƒë∆∞·ª£c ƒë·ªìng b·ªô v·ªõi WooCommerce.\n"
                                  "Kh√¥ng th·ªÉ ch·ªânh s·ª≠a tr·ª±c ti·∫øp.")
                # Kh√¥i ph·ª•c gi√° tr·ªã c≈©
                self.load_categories()
                return
            
            # X√°c ƒë·ªãnh field ƒë∆∞·ª£c ch·ªânh s·ª≠a
            new_value = item.text()
            field_name = ""
            
            if column == 2:  # T√™n danh m·ª•c
                field_name = "name"
                # Lo·∫°i b·ªè tree structure prefix n·∫øu c√≥
                if "‚îú‚îÄ‚îÄ " in new_value or "‚îî‚îÄ‚îÄ " in new_value:
                    # Extract actual name from tree structure
                    if "‚îú‚îÄ‚îÄ " in new_value:
                        new_value = new_value.split("‚îú‚îÄ‚îÄ ")[-1]
                    elif "‚îî‚îÄ‚îÄ " in new_value:
                        new_value = new_value.split("‚îî‚îÄ‚îÄ ")[-1]
                    # Remove icons
                    new_value = new_value.replace("üìÅ ", "").replace("üìÇ ", "").replace("üìÑ ", "")
                    
            elif column == 3:  # Slug
                field_name = "slug"
            elif column == 4:  # Description
                field_name = "description"
            else:
                return  # Kh√¥ng cho ph√©p ch·ªânh s·ª≠a c√°c c·ªôt kh√°c
            
            # Ki·ªÉm tra gi√° tr·ªã m·ªõi c√≥ kh√°c kh√¥ng
            old_value = category_data.get(field_name, '')
            if new_value == old_value:
                return
            
            # Hi·ªÉn th·ªã dialog x√°c nh·∫≠n
            reply = QMessageBox.question(
                self, "X√°c nh·∫≠n c·∫≠p nh·∫≠t",
                f"B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t {field_name} t·ª´:\n"
                f"'{old_value}'\n"
                f"th√†nh:\n"
                f"'{new_value}'\n\n"
                "Thay ƒë·ªïi s·∫Ω ƒë∆∞·ª£c ƒë·ªìng b·ªô l√™n WooCommerce site.",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.Yes
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                # C·∫≠p nh·∫≠t d·ªØ li·ªáu
                updated_data = category_data.copy()
                updated_data[field_name] = new_value
                
                # G·ªçi h√†m c·∫≠p nh·∫≠t
                self.update_category_on_site(category_id, updated_data, wc_category_id)
            else:
                # Kh√¥i ph·ª•c gi√° tr·ªã c≈©
                self.load_categories()
                
        except Exception as e:
            self.logger.error(f"L·ªói inline edit: {str(e)}")
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t: {str(e)}")
            # Kh√¥i ph·ª•c d·ªØ li·ªáu
            self.load_categories()

    def debug_category_mapping(self):
        """Debug category mapping v√† parent-child relationships"""
        try:
            site_id = self.site_combo.currentData()
            if not site_id:
                QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt site ƒë·ªÉ debug")
                return
                
            categories = self.db.get_categories_by_site(site_id)
            
            debug_info = []
            debug_info.append("=== CATEGORY MAPPING DEBUG ===\n")
            debug_info.append(f"Site ID: {site_id}")
            debug_info.append(f"Total categories: {len(categories)}\n")
            
            # Ph√¢n t√≠ch parent-child relationships
            parent_children = {}
            root_categories = []
            orphaned_categories = []
            
            # Build lookup
            category_lookup = {cat.get('id'): cat for cat in categories}
            wc_lookup = {cat.get('wc_category_id'): cat for cat in categories if cat.get('wc_category_id')}
            
            debug_info.append("=== CATEGORY DETAILS ===")
            for category in categories:
                local_id = category.get('id')
                wc_id = category.get('wc_category_id')
                parent_id = category.get('parent_id')
                name = category.get('name', '')
                
                debug_info.append(f"ID: {local_id} | WC_ID: {wc_id} | Parent: {parent_id} | Name: {name}")
                
                if not parent_id or parent_id == 0:
                    root_categories.append(category)
                else:
                    # Ki·ªÉm tra parent c√≥ t·ªìn t·∫°i kh√¥ng
                    if parent_id in category_lookup or parent_id in wc_lookup:
                        if parent_id not in parent_children:
                            parent_children[parent_id] = []
                        parent_children[parent_id].append(category)
                    else:
                        orphaned_categories.append(category)
                        debug_info.append(f"  ‚Üí ORPHANED: Parent {parent_id} not found!")
            
            debug_info.append(f"\n=== SUMMARY ===")
            debug_info.append(f"Root categories: {len(root_categories)}")
            debug_info.append(f"Categories with children: {len(parent_children)}")
            debug_info.append(f"Orphaned categories: {len(orphaned_categories)}")
            
            if orphaned_categories:
                debug_info.append(f"\n=== ORPHANED CATEGORIES ===")
                for cat in orphaned_categories:
                    debug_info.append(f"- {cat.get('name')} (ID: {cat.get('id')}, Parent: {cat.get('parent_id')})")
            
            debug_info.append(f"\n=== PARENT-CHILD TREE ===")
            for parent_id, children in parent_children.items():
                parent_name = "Unknown"
                if parent_id in category_lookup:
                    parent_name = category_lookup[parent_id].get('name', 'Unknown')
                elif parent_id in wc_lookup:
                    parent_name = wc_lookup[parent_id].get('name', 'Unknown')
                    
                debug_info.append(f"Parent {parent_id} ({parent_name}):")
                for child in children:
                    debug_info.append(f"  ‚îî‚îÄ‚îÄ {child.get('name')} (ID: {child.get('id')})")
            
            # Hi·ªÉn th·ªã debug info
            debug_text = "\n".join(debug_info)
            
            dialog = QDialog(self)
            dialog.setWindowTitle("Category Mapping Debug")
            dialog.resize(800, 600)
            
            layout = QVBoxLayout(dialog)
            
            text_edit = QTextEdit()
            text_edit.setPlainText(debug_text)
            text_edit.setFont(QFont("Courier", 9))
            layout.addWidget(text_edit)
            
            buttons = QHBoxLayout()
            close_btn = QPushButton("ƒê√≥ng")
            close_btn.clicked.connect(dialog.close)
            copy_btn = QPushButton("Copy to Clipboard")
            copy_btn.clicked.connect(lambda: QApplication.clipboard().setText(debug_text))
            
            buttons.addWidget(copy_btn)
            buttons.addWidget(close_btn)
            layout.addLayout(buttons)
            
            dialog.exec()
            
        except Exception as e:
            self.logger.error(f"L·ªói debug category mapping: {str(e)}")
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ debug category mapping: {str(e)}")